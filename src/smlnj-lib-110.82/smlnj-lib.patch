diff --git a/Controls/controls-lib.mlb b/Controls/controls-lib.mlb
new file mode 100644
index 0000000..501b6f8
--- /dev/null
+++ b/Controls/controls-lib.mlb
@@ -0,0 +1,178 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l8 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l4 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = GetOpt
+   end
+   local
+      open l8
+   in
+      structure gs_1 = Option
+   end
+   local
+      open l8
+   in
+      structure gs_2 = List
+   end
+   local
+      open l4
+   in
+      structure gs_3 = Atom
+   end
+   local
+      open l8
+   in
+      structure gs_4 = Int
+   end
+   local
+      structure GetOpt = gs_0
+      controls-sig.sml
+   in
+      signature gs_5 = CONTROLS
+   end
+   local
+      open l4
+   in
+      structure gs_6 = AtomTable
+   end
+   local
+      structure Atom = gs_3
+      structure AtomTable = gs_6
+      structure Int = gs_4
+      structure List = gs_2
+      control-reps.sml
+   in
+      structure gs_7 = ControlReps
+   end
+   local
+      structure Atom = gs_3
+      signature CONTROLS = gs_5
+      structure ControlReps = gs_7
+      structure GetOpt = gs_0
+      structure Int = gs_4
+      structure List = gs_2
+      structure Option = gs_1
+      controls.sml
+   in
+      structure gs_8 = Controls
+   end
+   local
+      open l4
+   in
+      structure gs_9 = ListMergeSort
+   end
+   local
+      structure Atom = gs_3
+      structure Controls = gs_8
+      control-set-sig.sml
+   in
+      signature gs_10 = CONTROL_SET
+   end
+   local
+      structure AtomTable = gs_6
+      signature CONTROL_SET = gs_10
+      structure ControlReps = gs_7
+      structure Controls = gs_8
+      structure ListMergeSort = gs_9
+      structure Option = gs_1
+      control-set.sml
+   in
+      structure gs_11 = ControlSet
+   end
+   local
+      structure ControlSet = gs_11
+      structure Controls = gs_8
+      registry-sig.sml
+   in
+      signature gs_12 = CONTROL_REGISTRY
+   end
+   local
+      open l8
+   in
+      structure gs_13 = String
+   end
+   local
+      open l8
+   in
+      structure gs_14 = Real
+   end
+   local
+      open l8
+   in
+      structure gs_15 = Char
+   end
+   local
+      open l8
+   in
+      structure gs_16 = Bool
+   end
+   local
+      structure Controls = gs_8
+      control-util-sig.sml
+   in
+      signature gs_17 = CONTROL_UTIL
+   end
+   local
+      structure Bool = gs_16
+      signature CONTROL_UTIL = gs_17
+      structure Char = gs_15
+      structure Controls = gs_8
+      structure Int = gs_4
+      structure List = gs_2
+      structure Real = gs_14
+      structure String = gs_13
+      control-util.sml
+   in
+      structure gs_18 = ControlUtil
+   end
+   local
+      open l8
+   in
+      structure gs_19 = OS
+   end
+   local
+      structure Atom = gs_3
+      structure AtomTable = gs_6
+      signature CONTROL_REGISTRY = gs_12
+      structure ControlReps = gs_7
+      structure ControlSet = gs_11
+      structure Controls = gs_8
+      structure List = gs_2
+      structure ListMergeSort = gs_9
+      structure OS = gs_19
+      registry.sml
+   in
+      structure gs_20 = ControlRegistry
+   end
+in
+   signature CONTROLS = gs_5
+   signature CONTROL_REGISTRY = gs_12
+   signature CONTROL_SET = gs_10
+   signature CONTROL_UTIL = gs_17
+   structure ControlRegistry = gs_20
+   structure ControlSet = gs_11
+   structure ControlUtil = gs_18
+   structure Controls = gs_8
+end
+end
+
+end
diff --git a/HTML/html-lex.sml b/HTML/html-lex.sml
index f1de5c0..9ffd254 100644
--- a/HTML/html-lex.sml
+++ b/HTML/html-lex.sml
@@ -178,7 +178,7 @@ Vector.fromList []
 		(fn (~1, _, oldMatches) => yystuck oldMatches
 		  | (curState, strm, oldMatches) => let
 		      val (transitions, finals') = Vector.sub (yytable, curState)
-		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
+		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
 		      fun tryfinal() = 
 		            yystuck (yyactsToMatches (strm, finals, oldMatches))
 		      fun find (c, []) = NONE
@@ -990,7 +990,6 @@ end
         end
     in
     fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
-    fun makeLexer' ins = mk (yyInput.mkStream ins)
     end
 
   end
diff --git a/HTML/html-lib.mlb b/HTML/html-lib.mlb
new file mode 100644
index 0000000..a5f8ca3
--- /dev/null
+++ b/HTML/html-lib.mlb
@@ -0,0 +1,302 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l5 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l46 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l35 =
+    bas
+      (* $/ml-yacc-lib.cm ====> *) $(SML_LIB)/mlyacc-lib/mlyacc-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l5
+   in
+      structure gs_0 = General
+   end
+   local
+      open l5
+   in
+      structure gs_1 = String
+   end
+   local
+      open l5
+   in
+      structure gs_2 = List
+   end
+   local
+      open l5
+   in
+      structure gs_3 = Char
+   end
+   local
+      html-sig.sml
+   in
+      signature gs_4 = HTML
+   end
+   local
+      structure Char = gs_3
+      structure General = gs_0
+      signature HTML = gs_4
+      structure List = gs_2
+      structure String = gs_1
+      html.sml
+   in
+      structure gs_5 = HTML
+   end
+   local
+      structure HTML = gs_5
+      make-html.sml
+   in
+      structure gs_6 = MakeHTML
+   end
+   local
+      structure HTML = gs_5
+      html-defaults.sml
+   in
+      structure gs_7 = HTMLDefaults
+   end
+   local
+      html-error-sig.sml
+   in
+      signature gs_8 = HTML_ERROR
+   end
+   local
+      open l35
+   in
+      functor gs_9 = Join
+      functor gs_10 = JoinWithArg
+   end
+   local
+      open l35
+   in
+      structure gs_11 = LrParser
+   end
+   local
+      open l5
+   in
+      structure gs_12 = TextIO
+   end
+   local
+      open l46
+   in
+      structure gs_13 = Format
+   end
+   local
+      structure Format = gs_13
+      structure HTML = gs_5
+      signature HTML_ERROR = gs_8
+      structure List = gs_2
+      check-html-fn.sml
+   in
+      functor gs_14 = CheckHTMLFn
+   end
+   local
+      open l5
+   in
+      structure gs_15 = IO
+   end
+   local
+      open l5
+   in
+      structure gs_16 = TextPrimIO
+   end
+   local
+      open l5
+   in
+      structure gs_17 = Vector
+   end
+   local
+      open l5
+   in
+      structure gs_18 = Substring
+   end
+   local
+      open l46
+   in
+      functor gs_19 = HashTableFn
+   end
+   local
+      open l46
+   in
+      structure gs_20 = HashString
+   end
+   local
+      html-attr-vals.sml
+   in
+      structure gs_21 = HTMLAttrVals
+   end
+   local
+      structure HTML = gs_5
+      structure HTMLAttrVals = gs_21
+      html-attrs-sig.sml
+   in
+      signature gs_22 = HTML_ATTRS
+   end
+   local
+      open l35
+   in
+      signature gs_23 = ARG_LEXER
+      signature gs_24 = ARG_PARSER
+      signature gs_25 = LEXER
+      signature gs_26 = LR_PARSER
+      signature gs_27 = LR_TABLE
+      signature gs_28 = PARSER
+      signature gs_29 = PARSER_DATA
+      signature gs_30 = STREAM
+      signature gs_31 = TOKEN
+   end
+   local
+      signature ARG_LEXER = gs_23
+      signature ARG_PARSER = gs_24
+      structure HTMLAttrVals = gs_21
+      signature LEXER = gs_25
+      signature LR_PARSER = gs_26
+      signature LR_TABLE = gs_27
+      signature PARSER = gs_28
+      signature PARSER_DATA = gs_29
+      signature STREAM = gs_30
+      signature TOKEN = gs_31
+      html-gram.sig
+   in
+      signature gs_32 = HTML_LRVALS
+      signature gs_33 = HTML_TOKENS
+   end
+   local
+      structure Char = gs_3
+      signature HTML_ATTRS = gs_22
+      signature HTML_ERROR = gs_8
+      signature HTML_LRVALS = gs_32
+      signature HTML_TOKENS = gs_33
+      structure HashString = gs_20
+      functor HashTableFn = gs_19
+      structure List = gs_2
+      structure String = gs_1
+      structure Substring = gs_18
+      html-elements-fn.sml
+   in
+      functor gs_34 = HTMLElementsFn
+   end
+   local
+      structure Char = gs_3
+      functor HTMLElementsFn = gs_34
+      signature HTML_ATTRS = gs_22
+      signature HTML_ERROR = gs_8
+      signature HTML_LRVALS = gs_32
+      signature HTML_TOKENS = gs_33
+      structure IO = gs_15
+      structure List = gs_2
+      structure String = gs_1
+      structure TextIO = gs_12
+      structure TextPrimIO = gs_16
+      structure Vector = gs_17
+      html-lex.sml
+   in
+      functor gs_35 = HTMLLexFn
+   end
+   local
+      open l5
+   in
+      structure gs_36 = Array
+   end
+   local
+      signature ARG_LEXER = gs_23
+      signature ARG_PARSER = gs_24
+      structure Array = gs_36
+      structure Char = gs_3
+      structure General = gs_0
+      structure HTML = gs_5
+      structure HTMLAttrVals = gs_21
+      signature HTML_ATTRS = gs_22
+      signature HTML_LRVALS = gs_32
+      signature HTML_TOKENS = gs_33
+      signature LEXER = gs_25
+      signature LR_PARSER = gs_26
+      signature LR_TABLE = gs_27
+      structure List = gs_2
+      signature PARSER = gs_28
+      signature PARSER_DATA = gs_29
+      signature STREAM = gs_30
+      structure String = gs_1
+      signature TOKEN = gs_31
+      html-gram.sml
+   in
+      functor gs_37 = HTMLLrValsFn
+   end
+   local
+      open l5
+   in
+      structure gs_38 = Int
+   end
+   local
+      structure Array = gs_36
+      structure Char = gs_3
+      structure HTML = gs_5
+      structure HTMLAttrVals = gs_21
+      signature HTML_ATTRS = gs_22
+      signature HTML_ERROR = gs_8
+      structure HashString = gs_20
+      functor HashTableFn = gs_19
+      structure Int = gs_38
+      structure List = gs_2
+      structure String = gs_1
+      html-attrs-fn.sml
+   in
+      functor gs_39 = HTMLAttrsFn
+   end
+   local
+      functor CheckHTMLFn = gs_14
+      structure HTML = gs_5
+      functor HTMLAttrsFn = gs_39
+      functor HTMLLexFn = gs_35
+      functor HTMLLrValsFn = gs_37
+      signature HTML_ERROR = gs_8
+      functor Join = gs_9
+      functor JoinWithArg = gs_10
+      structure LrParser = gs_11
+      structure TextIO = gs_12
+      html-parser-fn.sml
+   in
+      functor gs_40 = HTMLParserFn
+   end
+   local
+      open l46
+   in
+      structure gs_41 = ListFormat
+   end
+   local
+      structure Format = gs_13
+      structure HTML = gs_5
+      structure Int = gs_38
+      structure List = gs_2
+      structure ListFormat = gs_41
+      pr-html.sml
+   in
+      structure gs_42 = PrHTML
+   end
+in
+   signature HTML = gs_4
+   structure HTML = gs_5
+   structure HTMLDefaults = gs_7
+   functor HTMLParserFn = gs_40
+   signature HTML_ERROR = gs_8
+   structure MakeHTML = gs_6
+   structure PrHTML = gs_42
+end
+end
+
+end
diff --git a/HTML4/html4-attr.g.sml b/HTML4/html4-attr.g.sml
index cfc415b..e0c2765 100644
--- a/HTML4/html4-attr.g.sml
+++ b/HTML4/html4-attr.g.sml
@@ -1,43 +1,41 @@
-structure 
-HTML4AttrTokens = struct
-
-    datatype token = EOF
-      | NUMBER of string
-      | DOT
-      | STRINGLIT of string
+structure HTML4AttrTokens =
+  struct
+    datatype token
+      = NAME of Atom.atom
       | EQUALS
-      | NAME of Atom.atom
-
-    val allToks = [EOF, DOT, EQUALS]
-
+      | STRINGLIT of string
+      | DOT
+      | NUMBER of string
+      | EOF
+    val allToks = [
+            EQUALS, DOT, EOF
+           ]
     fun toString tok =
 (case (tok)
- of (EOF) => "EOF"
-  | (NUMBER(_)) => "NUMBER"
-  | (DOT) => "."
-  | (STRINGLIT(_)) => "STRINGLIT"
+ of (NAME(_)) => "NAME"
   | (EQUALS) => "="
-  | (NAME(_)) => "NAME"
+  | (STRINGLIT(_)) => "STRINGLIT"
+  | (DOT) => "."
+  | (NUMBER(_)) => "NUMBER"
+  | (EOF) => "EOF"
 (* end case *))
     fun isKW tok =
 (case (tok)
- of (EOF) => false
-  | (NUMBER(_)) => false
-  | (DOT) => false
-  | (STRINGLIT(_)) => false
+ of (NAME(_)) => false
   | (EQUALS) => false
-  | (NAME(_)) => false
+  | (STRINGLIT(_)) => false
+  | (DOT) => false
+  | (NUMBER(_)) => false
+  | (EOF) => false
 (* end case *))
+    fun isEOF EOF = true
+      | isEOF _ = false
+  end (* HTML4AttrTokens *)
 
-  fun isEOF EOF = true
-    | isEOF _ = false
-
-end
-
-functor HTML4AttrParseFn(Lex : ANTLR_LEXER) = struct
+functor HTML4AttrParseFn (Lex : ANTLR_LEXER) = struct
 
   local
-    structure Tok = 
+    structure Tok =
 HTML4AttrTokens
     structure UserCode =
       struct
@@ -60,47 +58,81 @@ fun attr_value_PROD_3_ACT (SR, NUMBER, SR_SPAN : (Lex.pos * Lex.pos), NUMBER_SPA
     structure Err = AntlrErrHandler(
       structure Tok = Tok
       structure Lex = Lex)
+
+(* replace functor with inline structure for better optimization
     structure EBNF = AntlrEBNF(
       struct
 	type strm = Err.wstream
 	val getSpan = Err.getSpan
       end)
+*)
+    structure EBNF =
+      struct
+	fun optional (pred, parse, strm) =
+	      if pred strm
+		then let
+		  val (y, span, strm') = parse strm
+		  in
+		    (SOME y, span, strm')
+		  end
+		else (NONE, Err.getSpan strm, strm)
+
+	fun closure (pred, parse, strm) = let
+	      fun iter (strm, (left, right), ys) =
+		    if pred strm
+		      then let
+			val (y, (_, right'), strm') = parse strm
+			in iter (strm', (left, right'), y::ys)
+			end
+		      else (List.rev ys, (left, right), strm)
+	      in
+		iter (strm, Err.getSpan strm, [])
+	      end
+
+	fun posclos (pred, parse, strm) = let
+	      val (y, (left, _), strm') = parse strm
+	      val (ys, (_, right), strm'') = closure (pred, parse, strm')
+	      in
+		(y::ys, (left, right), strm'')
+	      end
+      end
 
     fun mk lexFn = let
 fun getS() = {}
 fun putS{} = ()
-fun unwrap (ret, strm, repairs) = (ret, strm, repairs)        val (eh, lex) = Err.mkErrHandler {get = getS, put = putS}
+fun unwrap (ret, strm, repairs) = (ret, strm, repairs)
+        val (eh, lex) = Err.mkErrHandler {get = getS, put = putS}
 	fun fail() = Err.failure eh
 	fun tryProds (strm, prods) = let
 	  fun try [] = fail()
-	    | try (prod :: prods) = 
-	        (Err.whileDisabled eh (fn() => prod strm)) 
+	    | try (prod :: prods) =
+	        (Err.whileDisabled eh (fn() => prod strm))
 		handle Err.ParseError => try (prods)
           in try prods end
-fun matchEOF strm = (case (lex(strm))
- of (Tok.EOF, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchNUMBER strm = (case (lex(strm))
- of (Tok.NUMBER(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchDOT strm = (case (lex(strm))
- of (Tok.DOT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTRINGLIT strm = (case (lex(strm))
- of (Tok.STRINGLIT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchEQUALS strm = (case (lex(strm))
- of (Tok.EQUALS, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
 fun matchNAME strm = (case (lex(strm))
  of (Tok.NAME(x), span, strm') => (x, span, strm')
   | _ => fail()
 (* end case *))
+fun matchEQUALS strm = (case (lex(strm))
+ of (Tok.EQUALS, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTRINGLIT strm = (case (lex(strm))
+ of (Tok.STRINGLIT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchDOT strm = (case (lex(strm))
+ of (Tok.DOT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchNUMBER strm = (case (lex(strm))
+ of (Tok.NUMBER(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchEOF strm = (case (lex(strm))
+ of (Tok.EOF, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
 
 val (attrs_NT) = 
 let
diff --git a/HTML4/html4-lib.cm b/HTML4/html4-lib.cm
index 8248a55..dba213b 100644
--- a/HTML4/html4-lib.cm
+++ b/HTML4/html4-lib.cm
@@ -23,6 +23,9 @@ is
   $/smlnj-lib.cm
   $/ml-lpt-lib.cm
 
+  $/pp-lib.cm
+  pp-init.sml
+
   html4.g : ml-antlr
   html4.l : ml-ulex
 
diff --git a/HTML4/html4-lib.mlb b/HTML4/html4-lib.mlb
new file mode 100644
index 0000000..46eaf3d
--- /dev/null
+++ b/HTML4/html4-lib.mlb
@@ -0,0 +1,279 @@
+
+ann
+  "nonexhaustiveBind ignore" "nonexhaustiveMatch ignore"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l8 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l55 =
+    bas
+      (* $/ml-lpt-lib.cm ====> *) $(SML_LIB)/mllpt-lib/mllpt-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = String
+   end
+   local
+      open l8
+   in
+      structure gs_1 = Atom
+   end
+   local
+      structure Atom = gs_1
+      structure String = gs_0
+      html4-utils.sml
+   in
+      structure gs_2 = HTML4Utils
+   end
+   local
+      open l8
+   in
+      structure gs_3 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_4 = IntInf
+   end
+   local
+      open l4
+   in
+      structure gs_5 = List
+   end
+   local
+      structure Atom = gs_1
+      structure IntInf = gs_4
+      html4.sig
+   in
+      signature gs_6 = HTML4
+   end
+   local
+      structure Atom = gs_1
+      signature HTML4 = gs_6
+      structure IntInf = gs_4
+      html4.sml
+   in
+      structure gs_7 = HTML4
+   end
+   local
+      structure Atom = gs_1
+      structure Format = gs_3
+      structure HTML4 = gs_7
+      structure IntInf = gs_4
+      structure List = gs_5
+      structure String = gs_0
+      html4-print.sml
+   in
+      structure gs_8 = HTML4Print
+   end
+   local
+      structure Atom = gs_1
+      html4-attrs.sml
+   in
+      structure gs_9 = HTML4Attrs
+   end
+   local
+      open l8
+   in
+      signature gs_10 = ORD_MAP
+   end
+   local
+      open l8
+   in
+      functor gs_11 = RedBlackMapFn
+   end
+   local
+      open l4
+   in
+      structure gs_12 = CharVectorSlice
+   end
+   local
+      open l4
+   in
+      structure gs_13 = Substring
+   end
+   local
+      open l4
+   in
+      structure gs_14 = Char
+   end
+   local
+      open l55
+   in
+      structure gs_15 = AntlrStreamPos
+   end
+   local
+      open l4
+   in
+      structure gs_16 = TextIO
+   end
+   local
+      open l55
+   in
+      functor gs_17 = AntlrErrHandler
+   end
+   local
+      open l55
+   in
+      signature gs_18 = ANTLR_LEXER
+   end
+   local
+      signature ANTLR_LEXER = gs_18
+      functor AntlrErrHandler = gs_17
+      structure Atom = gs_1
+      structure HTML4Utils = gs_2
+      structure IntInf = gs_4
+      structure List = gs_5
+      html4.g.sml
+   in
+      functor gs_19 = HTML4ParseFn
+      structure gs_20 = HTML4Tokens
+   end
+   local
+      signature ANTLR_LEXER = gs_18
+      functor AntlrErrHandler = gs_17
+      structure Atom = gs_1
+      structure List = gs_5
+      structure String = gs_0
+      html4-attr.g.sml
+   in
+      functor gs_21 = HTML4AttrParseFn
+      structure gs_22 = HTML4AttrTokens
+   end
+   local
+      open l4
+   in
+      structure gs_23 = Vector
+   end
+   local
+      open l55
+   in
+      structure gs_24 = ULexBuffer
+   end
+   local
+      open l55
+   in
+      structure gs_25 = UTF8
+   end
+   local
+      structure AntlrStreamPos = gs_15
+      structure Atom = gs_1
+      functor HTML4AttrParseFn = gs_21
+      structure HTML4AttrTokens = gs_22
+      structure List = gs_5
+      structure String = gs_0
+      structure Substring = gs_13
+      structure TextIO = gs_16
+      structure ULexBuffer = gs_24
+      structure UTF8 = gs_25
+      structure Vector = gs_23
+      html4-attr.l.sml
+   in
+      structure gs_26 = HTML4AttrLexer
+   end
+   local
+      structure AntlrStreamPos = gs_15
+      structure Atom = gs_1
+      structure Char = gs_14
+      structure CharVectorSlice = gs_12
+      structure HTML4AttrLexer = gs_26
+      functor HTML4AttrParseFn = gs_21
+      structure HTML4AttrTokens = gs_22
+      functor HTML4ParseFn = gs_19
+      structure HTML4Tokens = gs_20
+      structure HTML4Utils = gs_2
+      structure IntInf = gs_4
+      signature ORD_MAP = gs_10
+      functor RedBlackMapFn = gs_11
+      structure String = gs_0
+      structure Substring = gs_13
+      structure TextIO = gs_16
+      html4-token-utils.sml
+   in
+      structure gs_27 = HTML4TokenUtils
+   end
+   local
+      structure Atom = gs_1
+      structure HTML4 = gs_7
+      html4-entities.sml
+   in
+      structure gs_28 = HTML4Entities
+   end
+   local
+      open l4
+   in
+      structure gs_29 = CharVector
+   end
+   local
+      open l4
+   in
+      structure gs_30 = Option
+   end
+   local
+      open l4
+   in
+      structure gs_31 = StringCvt
+   end
+   local
+      structure AntlrStreamPos = gs_15
+      structure Atom = gs_1
+      structure HTML4TokenUtils = gs_27
+      structure IntInf = gs_4
+      structure List = gs_5
+      structure String = gs_0
+      structure StringCvt = gs_31
+      structure Substring = gs_13
+      structure TextIO = gs_16
+      structure ULexBuffer = gs_24
+      structure UTF8 = gs_25
+      structure Vector = gs_23
+      html4.l.sml
+   in
+      structure gs_32 = HTML4Lexer
+   end
+   local
+      structure AntlrStreamPos = gs_15
+      structure Atom = gs_1
+      structure Char = gs_14
+      structure CharVector = gs_29
+      structure HTML4 = gs_7
+      structure HTML4Lexer = gs_32
+      functor HTML4ParseFn = gs_19
+      structure HTML4TokenUtils = gs_27
+      structure HTML4Tokens = gs_20
+      structure HTML4Utils = gs_2
+      structure Option = gs_30
+      structure String = gs_0
+      structure TextIO = gs_16
+      html4-parser.sml
+   in
+      structure gs_33 = HTML4Parser
+   end
+in
+   signature HTML4 = gs_6
+   structure HTML4 = gs_7
+   structure HTML4Attrs = gs_9
+   structure HTML4Entities = gs_28
+   structure HTML4Parser = gs_33
+   structure HTML4Print = gs_8
+   structure HTML4TokenUtils = gs_27
+   structure HTML4Tokens = gs_20
+   structure HTML4Utils = gs_2
+end
+end
+
+end
diff --git a/HTML4/html4.g.sml b/HTML4/html4.g.sml
index 52d716b..75e445f 100644
--- a/HTML4/html4.g.sml
+++ b/HTML4/html4.g.sml
@@ -1,559 +1,557 @@
-structure 
-HTML4Tokens = struct
-
-    datatype token = EOF
-      | ENDVAR
-      | STARTVAR of HTML4Utils.tag_payload
-      | ENDUL
-      | STARTUL of HTML4Utils.tag_payload
-      | ENDU
-      | STARTU of HTML4Utils.tag_payload
-      | ENDTT
-      | STARTTT of HTML4Utils.tag_payload
-      | ENDTR
-      | STARTTR of HTML4Utils.tag_payload
-      | ENDTITLE
-      | STARTTITLE of HTML4Utils.tag_payload
-      | ENDTHEAD
-      | STARTTHEAD of HTML4Utils.tag_payload
-      | ENDTH
-      | STARTTH of HTML4Utils.tag_payload
-      | ENDTFOOT
-      | STARTTFOOT of HTML4Utils.tag_payload
-      | ENDTEXTAREA
-      | STARTTEXTAREA of HTML4Utils.tag_payload
-      | ENDTD
-      | STARTTD of HTML4Utils.tag_payload
-      | ENDTBODY
-      | STARTTBODY of HTML4Utils.tag_payload
-      | ENDTABLE
-      | STARTTABLE of HTML4Utils.tag_payload
-      | ENDSUP
-      | STARTSUP of HTML4Utils.tag_payload
-      | ENDSUB
-      | STARTSUB of HTML4Utils.tag_payload
-      | ENDSTYLE
-      | STARTSTYLE of HTML4Utils.tag_payload
-      | ENDSTRONG
-      | STARTSTRONG of HTML4Utils.tag_payload
-      | ENDSTRIKE
-      | STARTSTRIKE of HTML4Utils.tag_payload
-      | ENDSPAN
-      | STARTSPAN of HTML4Utils.tag_payload
-      | ENDSMALL
-      | STARTSMALL of HTML4Utils.tag_payload
-      | ENDSELECT
-      | STARTSELECT of HTML4Utils.tag_payload
-      | ENDSCRIPT
-      | STARTSCRIPT of HTML4Utils.tag_payload
-      | ENDSAMP
-      | STARTSAMP of HTML4Utils.tag_payload
-      | ENDS
-      | STARTS of HTML4Utils.tag_payload
-      | ENDQ
-      | STARTQ of HTML4Utils.tag_payload
-      | ENDPRE
-      | STARTPRE of HTML4Utils.tag_payload
-      | STARTPARAM of HTML4Utils.tag_payload
-      | ENDP
-      | STARTP of HTML4Utils.tag_payload
-      | ENDOPTION
-      | STARTOPTION of HTML4Utils.tag_payload
-      | ENDOPTGROUP
-      | STARTOPTGROUP of HTML4Utils.tag_payload
-      | ENDOL
-      | STARTOL of HTML4Utils.tag_payload
-      | ENDOBJECT
-      | STARTOBJECT of HTML4Utils.tag_payload
-      | ENDNOSCRIPT
-      | STARTNOSCRIPT of HTML4Utils.tag_payload
-      | ENDNOFRAMES
-      | STARTNOFRAMES of HTML4Utils.tag_payload
-      | STARTMETA of HTML4Utils.tag_payload
-      | ENDMENU
-      | STARTMENU of HTML4Utils.tag_payload
-      | ENDMAP
-      | STARTMAP of HTML4Utils.tag_payload
-      | STARTLINK of HTML4Utils.tag_payload
-      | ENDLI
-      | STARTLI of HTML4Utils.tag_payload
-      | ENDLEGEND
-      | STARTLEGEND of HTML4Utils.tag_payload
-      | ENDLABEL
-      | STARTLABEL of HTML4Utils.tag_payload
-      | ENDKBD
-      | STARTKBD of HTML4Utils.tag_payload
-      | STARTISINDEX of HTML4Utils.tag_payload
-      | ENDINS
-      | STARTINS of HTML4Utils.tag_payload
-      | STARTINPUT of HTML4Utils.tag_payload
-      | STARTIMG of HTML4Utils.tag_payload
-      | ENDIFRAME
-      | STARTIFRAME of HTML4Utils.tag_payload
-      | ENDI
-      | STARTI of HTML4Utils.tag_payload
-      | ENDHTML
-      | STARTHTML of HTML4Utils.tag_payload
-      | STARTHR of HTML4Utils.tag_payload
-      | ENDHEAD
-      | STARTHEAD of HTML4Utils.tag_payload
-      | ENDH6
-      | STARTH6 of HTML4Utils.tag_payload
-      | ENDH5
-      | STARTH5 of HTML4Utils.tag_payload
-      | ENDH4
-      | STARTH4 of HTML4Utils.tag_payload
-      | ENDH3
-      | STARTH3 of HTML4Utils.tag_payload
-      | ENDH2
-      | STARTH2 of HTML4Utils.tag_payload
-      | ENDH1
-      | STARTH1 of HTML4Utils.tag_payload
-      | ENDFRAMESET
-      | STARTFRAMESET of HTML4Utils.tag_payload
-      | STARTFRAME of HTML4Utils.tag_payload
-      | ENDFORM
-      | STARTFORM of HTML4Utils.tag_payload
-      | ENDFONT
-      | STARTFONT of HTML4Utils.tag_payload
-      | ENDFIELDSET
-      | STARTFIELDSET of HTML4Utils.tag_payload
-      | ENDEM
-      | STARTEM of HTML4Utils.tag_payload
-      | ENDDT
-      | STARTDT of HTML4Utils.tag_payload
-      | ENDDL
-      | STARTDL of HTML4Utils.tag_payload
-      | ENDDIV
-      | STARTDIV of HTML4Utils.tag_payload
-      | ENDDIR
-      | STARTDIR of HTML4Utils.tag_payload
-      | ENDDFN
-      | STARTDFN of HTML4Utils.tag_payload
-      | ENDDEL
-      | STARTDEL of HTML4Utils.tag_payload
-      | ENDDD
-      | STARTDD of HTML4Utils.tag_payload
-      | ENDCOLGROUP
-      | STARTCOLGROUP of HTML4Utils.tag_payload
-      | STARTCOL of HTML4Utils.tag_payload
-      | ENDCODE
-      | STARTCODE of HTML4Utils.tag_payload
-      | ENDCITE
-      | STARTCITE of HTML4Utils.tag_payload
-      | ENDCENTER
-      | STARTCENTER of HTML4Utils.tag_payload
-      | ENDCAPTION
-      | STARTCAPTION of HTML4Utils.tag_payload
-      | ENDBUTTON
-      | STARTBUTTON of HTML4Utils.tag_payload
-      | STARTBR of HTML4Utils.tag_payload
-      | ENDBODY
-      | STARTBODY of HTML4Utils.tag_payload
-      | ENDBLOCKQUOTE
-      | STARTBLOCKQUOTE of HTML4Utils.tag_payload
-      | ENDBIG
-      | STARTBIG of HTML4Utils.tag_payload
-      | ENDBDO
-      | STARTBDO of HTML4Utils.tag_payload
-      | STARTBASEFONT of HTML4Utils.tag_payload
-      | STARTBASE of HTML4Utils.tag_payload
-      | ENDB
-      | STARTB of HTML4Utils.tag_payload
-      | STARTAREA of HTML4Utils.tag_payload
-      | ENDAPPLET
-      | STARTAPPLET of HTML4Utils.tag_payload
-      | ENDADDRESS
-      | STARTADDRESS of HTML4Utils.tag_payload
-      | ENDACRONYM
-      | STARTACRONYM of HTML4Utils.tag_payload
-      | ENDABBR
-      | STARTABBR of HTML4Utils.tag_payload
-      | ENDA
-      | STARTA of HTML4Utils.tag_payload
-      | XML_PROCESSING of string
-      | ENTITY_REF of Atom.atom
-      | CHAR_REF of IntInf.int
-      | DOCTYPE of string
-      | PCDATA of string
-      | COMMENT of string
+structure HTML4Tokens =
+  struct
+    datatype token
+      = OPENTAG of Atom.atom * HTML4Utils.tag_payload
       | CLOSETAG of Atom.atom
-      | OPENTAG of Atom.atom * HTML4Utils.tag_payload
-
-    val allToks = [EOF, ENDVAR, ENDUL, ENDU, ENDTT, ENDTR, ENDTITLE, ENDTHEAD, ENDTH, ENDTFOOT, ENDTEXTAREA, ENDTD, ENDTBODY, ENDTABLE, ENDSUP, ENDSUB, ENDSTYLE, ENDSTRONG, ENDSTRIKE, ENDSPAN, ENDSMALL, ENDSELECT, ENDSCRIPT, ENDSAMP, ENDS, ENDQ, ENDPRE, ENDP, ENDOPTION, ENDOPTGROUP, ENDOL, ENDOBJECT, ENDNOSCRIPT, ENDNOFRAMES, ENDMENU, ENDMAP, ENDLI, ENDLEGEND, ENDLABEL, ENDKBD, ENDINS, ENDIFRAME, ENDI, ENDHTML, ENDHEAD, ENDH6, ENDH5, ENDH4, ENDH3, ENDH2, ENDH1, ENDFRAMESET, ENDFORM, ENDFONT, ENDFIELDSET, ENDEM, ENDDT, ENDDL, ENDDIV, ENDDIR, ENDDFN, ENDDEL, ENDDD, ENDCOLGROUP, ENDCODE, ENDCITE, ENDCENTER, ENDCAPTION, ENDBUTTON, ENDBODY, ENDBLOCKQUOTE, ENDBIG, ENDBDO, ENDB, ENDAPPLET, ENDADDRESS, ENDACRONYM, ENDABBR, ENDA]
-
+      | COMMENT of string
+      | PCDATA of string
+      | DOCTYPE of string
+      | CHAR_REF of IntInf.int
+      | ENTITY_REF of Atom.atom
+      | XML_PROCESSING of string
+      | STARTA of HTML4Utils.tag_payload
+      | ENDA
+      | STARTABBR of HTML4Utils.tag_payload
+      | ENDABBR
+      | STARTACRONYM of HTML4Utils.tag_payload
+      | ENDACRONYM
+      | STARTADDRESS of HTML4Utils.tag_payload
+      | ENDADDRESS
+      | STARTAPPLET of HTML4Utils.tag_payload
+      | ENDAPPLET
+      | STARTAREA of HTML4Utils.tag_payload
+      | STARTB of HTML4Utils.tag_payload
+      | ENDB
+      | STARTBASE of HTML4Utils.tag_payload
+      | STARTBASEFONT of HTML4Utils.tag_payload
+      | STARTBDO of HTML4Utils.tag_payload
+      | ENDBDO
+      | STARTBIG of HTML4Utils.tag_payload
+      | ENDBIG
+      | STARTBLOCKQUOTE of HTML4Utils.tag_payload
+      | ENDBLOCKQUOTE
+      | STARTBODY of HTML4Utils.tag_payload
+      | ENDBODY
+      | STARTBR of HTML4Utils.tag_payload
+      | STARTBUTTON of HTML4Utils.tag_payload
+      | ENDBUTTON
+      | STARTCAPTION of HTML4Utils.tag_payload
+      | ENDCAPTION
+      | STARTCENTER of HTML4Utils.tag_payload
+      | ENDCENTER
+      | STARTCITE of HTML4Utils.tag_payload
+      | ENDCITE
+      | STARTCODE of HTML4Utils.tag_payload
+      | ENDCODE
+      | STARTCOL of HTML4Utils.tag_payload
+      | STARTCOLGROUP of HTML4Utils.tag_payload
+      | ENDCOLGROUP
+      | STARTDD of HTML4Utils.tag_payload
+      | ENDDD
+      | STARTDEL of HTML4Utils.tag_payload
+      | ENDDEL
+      | STARTDFN of HTML4Utils.tag_payload
+      | ENDDFN
+      | STARTDIR of HTML4Utils.tag_payload
+      | ENDDIR
+      | STARTDIV of HTML4Utils.tag_payload
+      | ENDDIV
+      | STARTDL of HTML4Utils.tag_payload
+      | ENDDL
+      | STARTDT of HTML4Utils.tag_payload
+      | ENDDT
+      | STARTEM of HTML4Utils.tag_payload
+      | ENDEM
+      | STARTFIELDSET of HTML4Utils.tag_payload
+      | ENDFIELDSET
+      | STARTFONT of HTML4Utils.tag_payload
+      | ENDFONT
+      | STARTFORM of HTML4Utils.tag_payload
+      | ENDFORM
+      | STARTFRAME of HTML4Utils.tag_payload
+      | STARTFRAMESET of HTML4Utils.tag_payload
+      | ENDFRAMESET
+      | STARTH1 of HTML4Utils.tag_payload
+      | ENDH1
+      | STARTH2 of HTML4Utils.tag_payload
+      | ENDH2
+      | STARTH3 of HTML4Utils.tag_payload
+      | ENDH3
+      | STARTH4 of HTML4Utils.tag_payload
+      | ENDH4
+      | STARTH5 of HTML4Utils.tag_payload
+      | ENDH5
+      | STARTH6 of HTML4Utils.tag_payload
+      | ENDH6
+      | STARTHEAD of HTML4Utils.tag_payload
+      | ENDHEAD
+      | STARTHR of HTML4Utils.tag_payload
+      | STARTHTML of HTML4Utils.tag_payload
+      | ENDHTML
+      | STARTI of HTML4Utils.tag_payload
+      | ENDI
+      | STARTIFRAME of HTML4Utils.tag_payload
+      | ENDIFRAME
+      | STARTIMG of HTML4Utils.tag_payload
+      | STARTINPUT of HTML4Utils.tag_payload
+      | STARTINS of HTML4Utils.tag_payload
+      | ENDINS
+      | STARTISINDEX of HTML4Utils.tag_payload
+      | STARTKBD of HTML4Utils.tag_payload
+      | ENDKBD
+      | STARTLABEL of HTML4Utils.tag_payload
+      | ENDLABEL
+      | STARTLEGEND of HTML4Utils.tag_payload
+      | ENDLEGEND
+      | STARTLI of HTML4Utils.tag_payload
+      | ENDLI
+      | STARTLINK of HTML4Utils.tag_payload
+      | STARTMAP of HTML4Utils.tag_payload
+      | ENDMAP
+      | STARTMENU of HTML4Utils.tag_payload
+      | ENDMENU
+      | STARTMETA of HTML4Utils.tag_payload
+      | STARTNOFRAMES of HTML4Utils.tag_payload
+      | ENDNOFRAMES
+      | STARTNOSCRIPT of HTML4Utils.tag_payload
+      | ENDNOSCRIPT
+      | STARTOBJECT of HTML4Utils.tag_payload
+      | ENDOBJECT
+      | STARTOL of HTML4Utils.tag_payload
+      | ENDOL
+      | STARTOPTGROUP of HTML4Utils.tag_payload
+      | ENDOPTGROUP
+      | STARTOPTION of HTML4Utils.tag_payload
+      | ENDOPTION
+      | STARTP of HTML4Utils.tag_payload
+      | ENDP
+      | STARTPARAM of HTML4Utils.tag_payload
+      | STARTPRE of HTML4Utils.tag_payload
+      | ENDPRE
+      | STARTQ of HTML4Utils.tag_payload
+      | ENDQ
+      | STARTS of HTML4Utils.tag_payload
+      | ENDS
+      | STARTSAMP of HTML4Utils.tag_payload
+      | ENDSAMP
+      | STARTSCRIPT of HTML4Utils.tag_payload
+      | ENDSCRIPT
+      | STARTSELECT of HTML4Utils.tag_payload
+      | ENDSELECT
+      | STARTSMALL of HTML4Utils.tag_payload
+      | ENDSMALL
+      | STARTSPAN of HTML4Utils.tag_payload
+      | ENDSPAN
+      | STARTSTRIKE of HTML4Utils.tag_payload
+      | ENDSTRIKE
+      | STARTSTRONG of HTML4Utils.tag_payload
+      | ENDSTRONG
+      | STARTSTYLE of HTML4Utils.tag_payload
+      | ENDSTYLE
+      | STARTSUB of HTML4Utils.tag_payload
+      | ENDSUB
+      | STARTSUP of HTML4Utils.tag_payload
+      | ENDSUP
+      | STARTTABLE of HTML4Utils.tag_payload
+      | ENDTABLE
+      | STARTTBODY of HTML4Utils.tag_payload
+      | ENDTBODY
+      | STARTTD of HTML4Utils.tag_payload
+      | ENDTD
+      | STARTTEXTAREA of HTML4Utils.tag_payload
+      | ENDTEXTAREA
+      | STARTTFOOT of HTML4Utils.tag_payload
+      | ENDTFOOT
+      | STARTTH of HTML4Utils.tag_payload
+      | ENDTH
+      | STARTTHEAD of HTML4Utils.tag_payload
+      | ENDTHEAD
+      | STARTTITLE of HTML4Utils.tag_payload
+      | ENDTITLE
+      | STARTTR of HTML4Utils.tag_payload
+      | ENDTR
+      | STARTTT of HTML4Utils.tag_payload
+      | ENDTT
+      | STARTU of HTML4Utils.tag_payload
+      | ENDU
+      | STARTUL of HTML4Utils.tag_payload
+      | ENDUL
+      | STARTVAR of HTML4Utils.tag_payload
+      | ENDVAR
+      | EOF
+    val allToks = [
+            ENDA, ENDABBR, ENDACRONYM, ENDADDRESS, ENDAPPLET, ENDB, ENDBDO, ENDBIG, ENDBLOCKQUOTE, ENDBODY, ENDBUTTON, ENDCAPTION, ENDCENTER, ENDCITE, ENDCODE, ENDCOLGROUP, ENDDD, ENDDEL, ENDDFN, ENDDIR, ENDDIV, ENDDL, ENDDT, ENDEM, ENDFIELDSET, ENDFONT, ENDFORM, ENDFRAMESET, ENDH1, ENDH2, ENDH3, ENDH4, ENDH5, ENDH6, ENDHEAD, ENDHTML, ENDI, ENDIFRAME, ENDINS, ENDKBD, ENDLABEL, ENDLEGEND, ENDLI, ENDMAP, ENDMENU, ENDNOFRAMES, ENDNOSCRIPT, ENDOBJECT, ENDOL, ENDOPTGROUP, ENDOPTION, ENDP, ENDPRE, ENDQ, ENDS, ENDSAMP, ENDSCRIPT, ENDSELECT, ENDSMALL, ENDSPAN, ENDSTRIKE, ENDSTRONG, ENDSTYLE, ENDSUB, ENDSUP, ENDTABLE, ENDTBODY, ENDTD, ENDTEXTAREA, ENDTFOOT, ENDTH, ENDTHEAD, ENDTITLE, ENDTR, ENDTT, ENDU, ENDUL, ENDVAR, EOF
+           ]
     fun toString tok =
 (case (tok)
- of (EOF) => "EOF"
-  | (ENDVAR) => "ENDVAR"
-  | (STARTVAR(_)) => "STARTVAR"
-  | (ENDUL) => "ENDUL"
-  | (STARTUL(_)) => "STARTUL"
-  | (ENDU) => "ENDU"
-  | (STARTU(_)) => "STARTU"
-  | (ENDTT) => "ENDTT"
-  | (STARTTT(_)) => "STARTTT"
-  | (ENDTR) => "ENDTR"
-  | (STARTTR(_)) => "STARTTR"
-  | (ENDTITLE) => "ENDTITLE"
-  | (STARTTITLE(_)) => "STARTTITLE"
-  | (ENDTHEAD) => "ENDTHEAD"
-  | (STARTTHEAD(_)) => "STARTTHEAD"
-  | (ENDTH) => "ENDTH"
-  | (STARTTH(_)) => "STARTTH"
-  | (ENDTFOOT) => "ENDTFOOT"
-  | (STARTTFOOT(_)) => "STARTTFOOT"
-  | (ENDTEXTAREA) => "ENDTEXTAREA"
-  | (STARTTEXTAREA(_)) => "STARTTEXTAREA"
-  | (ENDTD) => "ENDTD"
-  | (STARTTD(_)) => "STARTTD"
-  | (ENDTBODY) => "ENDTBODY"
-  | (STARTTBODY(_)) => "STARTTBODY"
-  | (ENDTABLE) => "ENDTABLE"
-  | (STARTTABLE(_)) => "STARTTABLE"
-  | (ENDSUP) => "ENDSUP"
-  | (STARTSUP(_)) => "STARTSUP"
-  | (ENDSUB) => "ENDSUB"
-  | (STARTSUB(_)) => "STARTSUB"
-  | (ENDSTYLE) => "ENDSTYLE"
-  | (STARTSTYLE(_)) => "STARTSTYLE"
-  | (ENDSTRONG) => "ENDSTRONG"
-  | (STARTSTRONG(_)) => "STARTSTRONG"
-  | (ENDSTRIKE) => "ENDSTRIKE"
-  | (STARTSTRIKE(_)) => "STARTSTRIKE"
-  | (ENDSPAN) => "ENDSPAN"
-  | (STARTSPAN(_)) => "STARTSPAN"
-  | (ENDSMALL) => "ENDSMALL"
-  | (STARTSMALL(_)) => "STARTSMALL"
-  | (ENDSELECT) => "ENDSELECT"
-  | (STARTSELECT(_)) => "STARTSELECT"
-  | (ENDSCRIPT) => "ENDSCRIPT"
-  | (STARTSCRIPT(_)) => "STARTSCRIPT"
-  | (ENDSAMP) => "ENDSAMP"
-  | (STARTSAMP(_)) => "STARTSAMP"
-  | (ENDS) => "ENDS"
-  | (STARTS(_)) => "STARTS"
-  | (ENDQ) => "ENDQ"
-  | (STARTQ(_)) => "STARTQ"
-  | (ENDPRE) => "ENDPRE"
-  | (STARTPRE(_)) => "STARTPRE"
-  | (STARTPARAM(_)) => "STARTPARAM"
-  | (ENDP) => "ENDP"
-  | (STARTP(_)) => "STARTP"
-  | (ENDOPTION) => "ENDOPTION"
-  | (STARTOPTION(_)) => "STARTOPTION"
-  | (ENDOPTGROUP) => "ENDOPTGROUP"
-  | (STARTOPTGROUP(_)) => "STARTOPTGROUP"
-  | (ENDOL) => "ENDOL"
-  | (STARTOL(_)) => "STARTOL"
-  | (ENDOBJECT) => "ENDOBJECT"
-  | (STARTOBJECT(_)) => "STARTOBJECT"
-  | (ENDNOSCRIPT) => "ENDNOSCRIPT"
-  | (STARTNOSCRIPT(_)) => "STARTNOSCRIPT"
-  | (ENDNOFRAMES) => "ENDNOFRAMES"
-  | (STARTNOFRAMES(_)) => "STARTNOFRAMES"
-  | (STARTMETA(_)) => "STARTMETA"
-  | (ENDMENU) => "ENDMENU"
-  | (STARTMENU(_)) => "STARTMENU"
-  | (ENDMAP) => "ENDMAP"
-  | (STARTMAP(_)) => "STARTMAP"
-  | (STARTLINK(_)) => "STARTLINK"
-  | (ENDLI) => "ENDLI"
-  | (STARTLI(_)) => "STARTLI"
-  | (ENDLEGEND) => "ENDLEGEND"
-  | (STARTLEGEND(_)) => "STARTLEGEND"
-  | (ENDLABEL) => "ENDLABEL"
-  | (STARTLABEL(_)) => "STARTLABEL"
-  | (ENDKBD) => "ENDKBD"
-  | (STARTKBD(_)) => "STARTKBD"
-  | (STARTISINDEX(_)) => "STARTISINDEX"
-  | (ENDINS) => "ENDINS"
-  | (STARTINS(_)) => "STARTINS"
-  | (STARTINPUT(_)) => "STARTINPUT"
-  | (STARTIMG(_)) => "STARTIMG"
-  | (ENDIFRAME) => "ENDIFRAME"
-  | (STARTIFRAME(_)) => "STARTIFRAME"
-  | (ENDI) => "ENDI"
-  | (STARTI(_)) => "STARTI"
-  | (ENDHTML) => "ENDHTML"
-  | (STARTHTML(_)) => "STARTHTML"
-  | (STARTHR(_)) => "STARTHR"
-  | (ENDHEAD) => "ENDHEAD"
-  | (STARTHEAD(_)) => "STARTHEAD"
-  | (ENDH6) => "ENDH6"
-  | (STARTH6(_)) => "STARTH6"
-  | (ENDH5) => "ENDH5"
-  | (STARTH5(_)) => "STARTH5"
-  | (ENDH4) => "ENDH4"
-  | (STARTH4(_)) => "STARTH4"
-  | (ENDH3) => "ENDH3"
-  | (STARTH3(_)) => "STARTH3"
-  | (ENDH2) => "ENDH2"
-  | (STARTH2(_)) => "STARTH2"
-  | (ENDH1) => "ENDH1"
-  | (STARTH1(_)) => "STARTH1"
-  | (ENDFRAMESET) => "ENDFRAMESET"
-  | (STARTFRAMESET(_)) => "STARTFRAMESET"
-  | (STARTFRAME(_)) => "STARTFRAME"
-  | (ENDFORM) => "ENDFORM"
-  | (STARTFORM(_)) => "STARTFORM"
-  | (ENDFONT) => "ENDFONT"
-  | (STARTFONT(_)) => "STARTFONT"
-  | (ENDFIELDSET) => "ENDFIELDSET"
-  | (STARTFIELDSET(_)) => "STARTFIELDSET"
-  | (ENDEM) => "ENDEM"
-  | (STARTEM(_)) => "STARTEM"
-  | (ENDDT) => "ENDDT"
-  | (STARTDT(_)) => "STARTDT"
-  | (ENDDL) => "ENDDL"
-  | (STARTDL(_)) => "STARTDL"
-  | (ENDDIV) => "ENDDIV"
-  | (STARTDIV(_)) => "STARTDIV"
-  | (ENDDIR) => "ENDDIR"
-  | (STARTDIR(_)) => "STARTDIR"
-  | (ENDDFN) => "ENDDFN"
-  | (STARTDFN(_)) => "STARTDFN"
-  | (ENDDEL) => "ENDDEL"
-  | (STARTDEL(_)) => "STARTDEL"
-  | (ENDDD) => "ENDDD"
-  | (STARTDD(_)) => "STARTDD"
-  | (ENDCOLGROUP) => "ENDCOLGROUP"
-  | (STARTCOLGROUP(_)) => "STARTCOLGROUP"
-  | (STARTCOL(_)) => "STARTCOL"
-  | (ENDCODE) => "ENDCODE"
-  | (STARTCODE(_)) => "STARTCODE"
-  | (ENDCITE) => "ENDCITE"
-  | (STARTCITE(_)) => "STARTCITE"
-  | (ENDCENTER) => "ENDCENTER"
-  | (STARTCENTER(_)) => "STARTCENTER"
-  | (ENDCAPTION) => "ENDCAPTION"
-  | (STARTCAPTION(_)) => "STARTCAPTION"
-  | (ENDBUTTON) => "ENDBUTTON"
-  | (STARTBUTTON(_)) => "STARTBUTTON"
-  | (STARTBR(_)) => "STARTBR"
-  | (ENDBODY) => "ENDBODY"
-  | (STARTBODY(_)) => "STARTBODY"
-  | (ENDBLOCKQUOTE) => "ENDBLOCKQUOTE"
-  | (STARTBLOCKQUOTE(_)) => "STARTBLOCKQUOTE"
-  | (ENDBIG) => "ENDBIG"
-  | (STARTBIG(_)) => "STARTBIG"
-  | (ENDBDO) => "ENDBDO"
-  | (STARTBDO(_)) => "STARTBDO"
-  | (STARTBASEFONT(_)) => "STARTBASEFONT"
-  | (STARTBASE(_)) => "STARTBASE"
-  | (ENDB) => "ENDB"
-  | (STARTB(_)) => "STARTB"
-  | (STARTAREA(_)) => "STARTAREA"
-  | (ENDAPPLET) => "ENDAPPLET"
-  | (STARTAPPLET(_)) => "STARTAPPLET"
-  | (ENDADDRESS) => "ENDADDRESS"
-  | (STARTADDRESS(_)) => "STARTADDRESS"
-  | (ENDACRONYM) => "ENDACRONYM"
-  | (STARTACRONYM(_)) => "STARTACRONYM"
-  | (ENDABBR) => "ENDABBR"
-  | (STARTABBR(_)) => "STARTABBR"
-  | (ENDA) => "ENDA"
-  | (STARTA(_)) => "STARTA"
-  | (XML_PROCESSING(_)) => "XML_PROCESSING"
-  | (ENTITY_REF(_)) => "ENTITY_REF"
-  | (CHAR_REF(_)) => "CHAR_REF"
-  | (DOCTYPE(_)) => "DOCTYPE"
-  | (PCDATA(_)) => "PCDATA"
-  | (COMMENT(_)) => "COMMENT"
+ of (OPENTAG(_)) => "OPENTAG"
   | (CLOSETAG(_)) => "CLOSETAG"
-  | (OPENTAG(_)) => "OPENTAG"
+  | (COMMENT(_)) => "COMMENT"
+  | (PCDATA(_)) => "PCDATA"
+  | (DOCTYPE(_)) => "DOCTYPE"
+  | (CHAR_REF(_)) => "CHAR_REF"
+  | (ENTITY_REF(_)) => "ENTITY_REF"
+  | (XML_PROCESSING(_)) => "XML_PROCESSING"
+  | (STARTA(_)) => "STARTA"
+  | (ENDA) => "ENDA"
+  | (STARTABBR(_)) => "STARTABBR"
+  | (ENDABBR) => "ENDABBR"
+  | (STARTACRONYM(_)) => "STARTACRONYM"
+  | (ENDACRONYM) => "ENDACRONYM"
+  | (STARTADDRESS(_)) => "STARTADDRESS"
+  | (ENDADDRESS) => "ENDADDRESS"
+  | (STARTAPPLET(_)) => "STARTAPPLET"
+  | (ENDAPPLET) => "ENDAPPLET"
+  | (STARTAREA(_)) => "STARTAREA"
+  | (STARTB(_)) => "STARTB"
+  | (ENDB) => "ENDB"
+  | (STARTBASE(_)) => "STARTBASE"
+  | (STARTBASEFONT(_)) => "STARTBASEFONT"
+  | (STARTBDO(_)) => "STARTBDO"
+  | (ENDBDO) => "ENDBDO"
+  | (STARTBIG(_)) => "STARTBIG"
+  | (ENDBIG) => "ENDBIG"
+  | (STARTBLOCKQUOTE(_)) => "STARTBLOCKQUOTE"
+  | (ENDBLOCKQUOTE) => "ENDBLOCKQUOTE"
+  | (STARTBODY(_)) => "STARTBODY"
+  | (ENDBODY) => "ENDBODY"
+  | (STARTBR(_)) => "STARTBR"
+  | (STARTBUTTON(_)) => "STARTBUTTON"
+  | (ENDBUTTON) => "ENDBUTTON"
+  | (STARTCAPTION(_)) => "STARTCAPTION"
+  | (ENDCAPTION) => "ENDCAPTION"
+  | (STARTCENTER(_)) => "STARTCENTER"
+  | (ENDCENTER) => "ENDCENTER"
+  | (STARTCITE(_)) => "STARTCITE"
+  | (ENDCITE) => "ENDCITE"
+  | (STARTCODE(_)) => "STARTCODE"
+  | (ENDCODE) => "ENDCODE"
+  | (STARTCOL(_)) => "STARTCOL"
+  | (STARTCOLGROUP(_)) => "STARTCOLGROUP"
+  | (ENDCOLGROUP) => "ENDCOLGROUP"
+  | (STARTDD(_)) => "STARTDD"
+  | (ENDDD) => "ENDDD"
+  | (STARTDEL(_)) => "STARTDEL"
+  | (ENDDEL) => "ENDDEL"
+  | (STARTDFN(_)) => "STARTDFN"
+  | (ENDDFN) => "ENDDFN"
+  | (STARTDIR(_)) => "STARTDIR"
+  | (ENDDIR) => "ENDDIR"
+  | (STARTDIV(_)) => "STARTDIV"
+  | (ENDDIV) => "ENDDIV"
+  | (STARTDL(_)) => "STARTDL"
+  | (ENDDL) => "ENDDL"
+  | (STARTDT(_)) => "STARTDT"
+  | (ENDDT) => "ENDDT"
+  | (STARTEM(_)) => "STARTEM"
+  | (ENDEM) => "ENDEM"
+  | (STARTFIELDSET(_)) => "STARTFIELDSET"
+  | (ENDFIELDSET) => "ENDFIELDSET"
+  | (STARTFONT(_)) => "STARTFONT"
+  | (ENDFONT) => "ENDFONT"
+  | (STARTFORM(_)) => "STARTFORM"
+  | (ENDFORM) => "ENDFORM"
+  | (STARTFRAME(_)) => "STARTFRAME"
+  | (STARTFRAMESET(_)) => "STARTFRAMESET"
+  | (ENDFRAMESET) => "ENDFRAMESET"
+  | (STARTH1(_)) => "STARTH1"
+  | (ENDH1) => "ENDH1"
+  | (STARTH2(_)) => "STARTH2"
+  | (ENDH2) => "ENDH2"
+  | (STARTH3(_)) => "STARTH3"
+  | (ENDH3) => "ENDH3"
+  | (STARTH4(_)) => "STARTH4"
+  | (ENDH4) => "ENDH4"
+  | (STARTH5(_)) => "STARTH5"
+  | (ENDH5) => "ENDH5"
+  | (STARTH6(_)) => "STARTH6"
+  | (ENDH6) => "ENDH6"
+  | (STARTHEAD(_)) => "STARTHEAD"
+  | (ENDHEAD) => "ENDHEAD"
+  | (STARTHR(_)) => "STARTHR"
+  | (STARTHTML(_)) => "STARTHTML"
+  | (ENDHTML) => "ENDHTML"
+  | (STARTI(_)) => "STARTI"
+  | (ENDI) => "ENDI"
+  | (STARTIFRAME(_)) => "STARTIFRAME"
+  | (ENDIFRAME) => "ENDIFRAME"
+  | (STARTIMG(_)) => "STARTIMG"
+  | (STARTINPUT(_)) => "STARTINPUT"
+  | (STARTINS(_)) => "STARTINS"
+  | (ENDINS) => "ENDINS"
+  | (STARTISINDEX(_)) => "STARTISINDEX"
+  | (STARTKBD(_)) => "STARTKBD"
+  | (ENDKBD) => "ENDKBD"
+  | (STARTLABEL(_)) => "STARTLABEL"
+  | (ENDLABEL) => "ENDLABEL"
+  | (STARTLEGEND(_)) => "STARTLEGEND"
+  | (ENDLEGEND) => "ENDLEGEND"
+  | (STARTLI(_)) => "STARTLI"
+  | (ENDLI) => "ENDLI"
+  | (STARTLINK(_)) => "STARTLINK"
+  | (STARTMAP(_)) => "STARTMAP"
+  | (ENDMAP) => "ENDMAP"
+  | (STARTMENU(_)) => "STARTMENU"
+  | (ENDMENU) => "ENDMENU"
+  | (STARTMETA(_)) => "STARTMETA"
+  | (STARTNOFRAMES(_)) => "STARTNOFRAMES"
+  | (ENDNOFRAMES) => "ENDNOFRAMES"
+  | (STARTNOSCRIPT(_)) => "STARTNOSCRIPT"
+  | (ENDNOSCRIPT) => "ENDNOSCRIPT"
+  | (STARTOBJECT(_)) => "STARTOBJECT"
+  | (ENDOBJECT) => "ENDOBJECT"
+  | (STARTOL(_)) => "STARTOL"
+  | (ENDOL) => "ENDOL"
+  | (STARTOPTGROUP(_)) => "STARTOPTGROUP"
+  | (ENDOPTGROUP) => "ENDOPTGROUP"
+  | (STARTOPTION(_)) => "STARTOPTION"
+  | (ENDOPTION) => "ENDOPTION"
+  | (STARTP(_)) => "STARTP"
+  | (ENDP) => "ENDP"
+  | (STARTPARAM(_)) => "STARTPARAM"
+  | (STARTPRE(_)) => "STARTPRE"
+  | (ENDPRE) => "ENDPRE"
+  | (STARTQ(_)) => "STARTQ"
+  | (ENDQ) => "ENDQ"
+  | (STARTS(_)) => "STARTS"
+  | (ENDS) => "ENDS"
+  | (STARTSAMP(_)) => "STARTSAMP"
+  | (ENDSAMP) => "ENDSAMP"
+  | (STARTSCRIPT(_)) => "STARTSCRIPT"
+  | (ENDSCRIPT) => "ENDSCRIPT"
+  | (STARTSELECT(_)) => "STARTSELECT"
+  | (ENDSELECT) => "ENDSELECT"
+  | (STARTSMALL(_)) => "STARTSMALL"
+  | (ENDSMALL) => "ENDSMALL"
+  | (STARTSPAN(_)) => "STARTSPAN"
+  | (ENDSPAN) => "ENDSPAN"
+  | (STARTSTRIKE(_)) => "STARTSTRIKE"
+  | (ENDSTRIKE) => "ENDSTRIKE"
+  | (STARTSTRONG(_)) => "STARTSTRONG"
+  | (ENDSTRONG) => "ENDSTRONG"
+  | (STARTSTYLE(_)) => "STARTSTYLE"
+  | (ENDSTYLE) => "ENDSTYLE"
+  | (STARTSUB(_)) => "STARTSUB"
+  | (ENDSUB) => "ENDSUB"
+  | (STARTSUP(_)) => "STARTSUP"
+  | (ENDSUP) => "ENDSUP"
+  | (STARTTABLE(_)) => "STARTTABLE"
+  | (ENDTABLE) => "ENDTABLE"
+  | (STARTTBODY(_)) => "STARTTBODY"
+  | (ENDTBODY) => "ENDTBODY"
+  | (STARTTD(_)) => "STARTTD"
+  | (ENDTD) => "ENDTD"
+  | (STARTTEXTAREA(_)) => "STARTTEXTAREA"
+  | (ENDTEXTAREA) => "ENDTEXTAREA"
+  | (STARTTFOOT(_)) => "STARTTFOOT"
+  | (ENDTFOOT) => "ENDTFOOT"
+  | (STARTTH(_)) => "STARTTH"
+  | (ENDTH) => "ENDTH"
+  | (STARTTHEAD(_)) => "STARTTHEAD"
+  | (ENDTHEAD) => "ENDTHEAD"
+  | (STARTTITLE(_)) => "STARTTITLE"
+  | (ENDTITLE) => "ENDTITLE"
+  | (STARTTR(_)) => "STARTTR"
+  | (ENDTR) => "ENDTR"
+  | (STARTTT(_)) => "STARTTT"
+  | (ENDTT) => "ENDTT"
+  | (STARTU(_)) => "STARTU"
+  | (ENDU) => "ENDU"
+  | (STARTUL(_)) => "STARTUL"
+  | (ENDUL) => "ENDUL"
+  | (STARTVAR(_)) => "STARTVAR"
+  | (ENDVAR) => "ENDVAR"
+  | (EOF) => "EOF"
 (* end case *))
     fun isKW tok =
 (case (tok)
- of (EOF) => false
-  | (ENDVAR) => false
-  | (STARTVAR(_)) => false
-  | (ENDUL) => false
-  | (STARTUL(_)) => false
-  | (ENDU) => false
-  | (STARTU(_)) => false
-  | (ENDTT) => false
-  | (STARTTT(_)) => false
-  | (ENDTR) => false
-  | (STARTTR(_)) => false
-  | (ENDTITLE) => false
-  | (STARTTITLE(_)) => false
-  | (ENDTHEAD) => false
-  | (STARTTHEAD(_)) => false
-  | (ENDTH) => false
-  | (STARTTH(_)) => false
-  | (ENDTFOOT) => false
-  | (STARTTFOOT(_)) => false
-  | (ENDTEXTAREA) => false
-  | (STARTTEXTAREA(_)) => false
-  | (ENDTD) => false
-  | (STARTTD(_)) => false
-  | (ENDTBODY) => false
-  | (STARTTBODY(_)) => false
-  | (ENDTABLE) => false
-  | (STARTTABLE(_)) => false
-  | (ENDSUP) => false
-  | (STARTSUP(_)) => false
-  | (ENDSUB) => false
-  | (STARTSUB(_)) => false
-  | (ENDSTYLE) => false
-  | (STARTSTYLE(_)) => false
-  | (ENDSTRONG) => false
-  | (STARTSTRONG(_)) => false
-  | (ENDSTRIKE) => false
-  | (STARTSTRIKE(_)) => false
-  | (ENDSPAN) => false
-  | (STARTSPAN(_)) => false
-  | (ENDSMALL) => false
-  | (STARTSMALL(_)) => false
-  | (ENDSELECT) => false
-  | (STARTSELECT(_)) => false
-  | (ENDSCRIPT) => false
-  | (STARTSCRIPT(_)) => false
-  | (ENDSAMP) => false
-  | (STARTSAMP(_)) => false
-  | (ENDS) => false
-  | (STARTS(_)) => false
-  | (ENDQ) => false
-  | (STARTQ(_)) => false
-  | (ENDPRE) => false
-  | (STARTPRE(_)) => false
-  | (STARTPARAM(_)) => false
-  | (ENDP) => false
-  | (STARTP(_)) => false
-  | (ENDOPTION) => false
-  | (STARTOPTION(_)) => false
-  | (ENDOPTGROUP) => false
-  | (STARTOPTGROUP(_)) => false
-  | (ENDOL) => false
-  | (STARTOL(_)) => false
-  | (ENDOBJECT) => false
-  | (STARTOBJECT(_)) => false
-  | (ENDNOSCRIPT) => false
-  | (STARTNOSCRIPT(_)) => false
-  | (ENDNOFRAMES) => false
-  | (STARTNOFRAMES(_)) => false
-  | (STARTMETA(_)) => false
-  | (ENDMENU) => false
-  | (STARTMENU(_)) => false
-  | (ENDMAP) => false
-  | (STARTMAP(_)) => false
-  | (STARTLINK(_)) => false
-  | (ENDLI) => false
-  | (STARTLI(_)) => false
-  | (ENDLEGEND) => false
-  | (STARTLEGEND(_)) => false
-  | (ENDLABEL) => false
-  | (STARTLABEL(_)) => false
-  | (ENDKBD) => false
-  | (STARTKBD(_)) => false
-  | (STARTISINDEX(_)) => false
-  | (ENDINS) => false
-  | (STARTINS(_)) => false
-  | (STARTINPUT(_)) => false
-  | (STARTIMG(_)) => false
-  | (ENDIFRAME) => false
-  | (STARTIFRAME(_)) => false
-  | (ENDI) => false
-  | (STARTI(_)) => false
-  | (ENDHTML) => false
-  | (STARTHTML(_)) => false
-  | (STARTHR(_)) => false
-  | (ENDHEAD) => false
-  | (STARTHEAD(_)) => false
-  | (ENDH6) => false
-  | (STARTH6(_)) => false
-  | (ENDH5) => false
-  | (STARTH5(_)) => false
-  | (ENDH4) => false
-  | (STARTH4(_)) => false
-  | (ENDH3) => false
-  | (STARTH3(_)) => false
-  | (ENDH2) => false
-  | (STARTH2(_)) => false
-  | (ENDH1) => false
-  | (STARTH1(_)) => false
-  | (ENDFRAMESET) => false
-  | (STARTFRAMESET(_)) => false
-  | (STARTFRAME(_)) => false
-  | (ENDFORM) => false
-  | (STARTFORM(_)) => false
-  | (ENDFONT) => false
-  | (STARTFONT(_)) => false
-  | (ENDFIELDSET) => false
-  | (STARTFIELDSET(_)) => false
-  | (ENDEM) => false
-  | (STARTEM(_)) => false
-  | (ENDDT) => false
-  | (STARTDT(_)) => false
-  | (ENDDL) => false
-  | (STARTDL(_)) => false
-  | (ENDDIV) => false
-  | (STARTDIV(_)) => false
-  | (ENDDIR) => false
-  | (STARTDIR(_)) => false
-  | (ENDDFN) => false
-  | (STARTDFN(_)) => false
-  | (ENDDEL) => false
-  | (STARTDEL(_)) => false
-  | (ENDDD) => false
-  | (STARTDD(_)) => false
-  | (ENDCOLGROUP) => false
-  | (STARTCOLGROUP(_)) => false
-  | (STARTCOL(_)) => false
-  | (ENDCODE) => false
-  | (STARTCODE(_)) => false
-  | (ENDCITE) => false
-  | (STARTCITE(_)) => false
-  | (ENDCENTER) => false
-  | (STARTCENTER(_)) => false
-  | (ENDCAPTION) => false
-  | (STARTCAPTION(_)) => false
-  | (ENDBUTTON) => false
-  | (STARTBUTTON(_)) => false
-  | (STARTBR(_)) => false
-  | (ENDBODY) => false
-  | (STARTBODY(_)) => false
-  | (ENDBLOCKQUOTE) => false
-  | (STARTBLOCKQUOTE(_)) => false
-  | (ENDBIG) => false
-  | (STARTBIG(_)) => false
-  | (ENDBDO) => false
-  | (STARTBDO(_)) => false
-  | (STARTBASEFONT(_)) => false
-  | (STARTBASE(_)) => false
-  | (ENDB) => false
-  | (STARTB(_)) => false
-  | (STARTAREA(_)) => false
-  | (ENDAPPLET) => false
-  | (STARTAPPLET(_)) => false
-  | (ENDADDRESS) => false
-  | (STARTADDRESS(_)) => false
-  | (ENDACRONYM) => false
-  | (STARTACRONYM(_)) => false
-  | (ENDABBR) => false
-  | (STARTABBR(_)) => false
-  | (ENDA) => false
-  | (STARTA(_)) => false
-  | (XML_PROCESSING(_)) => false
-  | (ENTITY_REF(_)) => false
-  | (CHAR_REF(_)) => false
-  | (DOCTYPE(_)) => false
-  | (PCDATA(_)) => false
-  | (COMMENT(_)) => false
+ of (OPENTAG(_)) => false
   | (CLOSETAG(_)) => false
-  | (OPENTAG(_)) => false
+  | (COMMENT(_)) => false
+  | (PCDATA(_)) => false
+  | (DOCTYPE(_)) => false
+  | (CHAR_REF(_)) => false
+  | (ENTITY_REF(_)) => false
+  | (XML_PROCESSING(_)) => false
+  | (STARTA(_)) => false
+  | (ENDA) => false
+  | (STARTABBR(_)) => false
+  | (ENDABBR) => false
+  | (STARTACRONYM(_)) => false
+  | (ENDACRONYM) => false
+  | (STARTADDRESS(_)) => false
+  | (ENDADDRESS) => false
+  | (STARTAPPLET(_)) => false
+  | (ENDAPPLET) => false
+  | (STARTAREA(_)) => false
+  | (STARTB(_)) => false
+  | (ENDB) => false
+  | (STARTBASE(_)) => false
+  | (STARTBASEFONT(_)) => false
+  | (STARTBDO(_)) => false
+  | (ENDBDO) => false
+  | (STARTBIG(_)) => false
+  | (ENDBIG) => false
+  | (STARTBLOCKQUOTE(_)) => false
+  | (ENDBLOCKQUOTE) => false
+  | (STARTBODY(_)) => false
+  | (ENDBODY) => false
+  | (STARTBR(_)) => false
+  | (STARTBUTTON(_)) => false
+  | (ENDBUTTON) => false
+  | (STARTCAPTION(_)) => false
+  | (ENDCAPTION) => false
+  | (STARTCENTER(_)) => false
+  | (ENDCENTER) => false
+  | (STARTCITE(_)) => false
+  | (ENDCITE) => false
+  | (STARTCODE(_)) => false
+  | (ENDCODE) => false
+  | (STARTCOL(_)) => false
+  | (STARTCOLGROUP(_)) => false
+  | (ENDCOLGROUP) => false
+  | (STARTDD(_)) => false
+  | (ENDDD) => false
+  | (STARTDEL(_)) => false
+  | (ENDDEL) => false
+  | (STARTDFN(_)) => false
+  | (ENDDFN) => false
+  | (STARTDIR(_)) => false
+  | (ENDDIR) => false
+  | (STARTDIV(_)) => false
+  | (ENDDIV) => false
+  | (STARTDL(_)) => false
+  | (ENDDL) => false
+  | (STARTDT(_)) => false
+  | (ENDDT) => false
+  | (STARTEM(_)) => false
+  | (ENDEM) => false
+  | (STARTFIELDSET(_)) => false
+  | (ENDFIELDSET) => false
+  | (STARTFONT(_)) => false
+  | (ENDFONT) => false
+  | (STARTFORM(_)) => false
+  | (ENDFORM) => false
+  | (STARTFRAME(_)) => false
+  | (STARTFRAMESET(_)) => false
+  | (ENDFRAMESET) => false
+  | (STARTH1(_)) => false
+  | (ENDH1) => false
+  | (STARTH2(_)) => false
+  | (ENDH2) => false
+  | (STARTH3(_)) => false
+  | (ENDH3) => false
+  | (STARTH4(_)) => false
+  | (ENDH4) => false
+  | (STARTH5(_)) => false
+  | (ENDH5) => false
+  | (STARTH6(_)) => false
+  | (ENDH6) => false
+  | (STARTHEAD(_)) => false
+  | (ENDHEAD) => false
+  | (STARTHR(_)) => false
+  | (STARTHTML(_)) => false
+  | (ENDHTML) => false
+  | (STARTI(_)) => false
+  | (ENDI) => false
+  | (STARTIFRAME(_)) => false
+  | (ENDIFRAME) => false
+  | (STARTIMG(_)) => false
+  | (STARTINPUT(_)) => false
+  | (STARTINS(_)) => false
+  | (ENDINS) => false
+  | (STARTISINDEX(_)) => false
+  | (STARTKBD(_)) => false
+  | (ENDKBD) => false
+  | (STARTLABEL(_)) => false
+  | (ENDLABEL) => false
+  | (STARTLEGEND(_)) => false
+  | (ENDLEGEND) => false
+  | (STARTLI(_)) => false
+  | (ENDLI) => false
+  | (STARTLINK(_)) => false
+  | (STARTMAP(_)) => false
+  | (ENDMAP) => false
+  | (STARTMENU(_)) => false
+  | (ENDMENU) => false
+  | (STARTMETA(_)) => false
+  | (STARTNOFRAMES(_)) => false
+  | (ENDNOFRAMES) => false
+  | (STARTNOSCRIPT(_)) => false
+  | (ENDNOSCRIPT) => false
+  | (STARTOBJECT(_)) => false
+  | (ENDOBJECT) => false
+  | (STARTOL(_)) => false
+  | (ENDOL) => false
+  | (STARTOPTGROUP(_)) => false
+  | (ENDOPTGROUP) => false
+  | (STARTOPTION(_)) => false
+  | (ENDOPTION) => false
+  | (STARTP(_)) => false
+  | (ENDP) => false
+  | (STARTPARAM(_)) => false
+  | (STARTPRE(_)) => false
+  | (ENDPRE) => false
+  | (STARTQ(_)) => false
+  | (ENDQ) => false
+  | (STARTS(_)) => false
+  | (ENDS) => false
+  | (STARTSAMP(_)) => false
+  | (ENDSAMP) => false
+  | (STARTSCRIPT(_)) => false
+  | (ENDSCRIPT) => false
+  | (STARTSELECT(_)) => false
+  | (ENDSELECT) => false
+  | (STARTSMALL(_)) => false
+  | (ENDSMALL) => false
+  | (STARTSPAN(_)) => false
+  | (ENDSPAN) => false
+  | (STARTSTRIKE(_)) => false
+  | (ENDSTRIKE) => false
+  | (STARTSTRONG(_)) => false
+  | (ENDSTRONG) => false
+  | (STARTSTYLE(_)) => false
+  | (ENDSTYLE) => false
+  | (STARTSUB(_)) => false
+  | (ENDSUB) => false
+  | (STARTSUP(_)) => false
+  | (ENDSUP) => false
+  | (STARTTABLE(_)) => false
+  | (ENDTABLE) => false
+  | (STARTTBODY(_)) => false
+  | (ENDTBODY) => false
+  | (STARTTD(_)) => false
+  | (ENDTD) => false
+  | (STARTTEXTAREA(_)) => false
+  | (ENDTEXTAREA) => false
+  | (STARTTFOOT(_)) => false
+  | (ENDTFOOT) => false
+  | (STARTTH(_)) => false
+  | (ENDTH) => false
+  | (STARTTHEAD(_)) => false
+  | (ENDTHEAD) => false
+  | (STARTTITLE(_)) => false
+  | (ENDTITLE) => false
+  | (STARTTR(_)) => false
+  | (ENDTR) => false
+  | (STARTTT(_)) => false
+  | (ENDTT) => false
+  | (STARTU(_)) => false
+  | (ENDU) => false
+  | (STARTUL(_)) => false
+  | (ENDUL) => false
+  | (STARTVAR(_)) => false
+  | (ENDVAR) => false
+  | (EOF) => false
 (* end case *))
+    fun isEOF EOF = true
+      | isEOF _ = false
+  end (* HTML4Tokens *)
 
-  fun isEOF EOF = true
-    | isEOF _ = false
-
-end
-
-functor HTML4ParseFn(Lex : ANTLR_LEXER) = struct
+functor HTML4ParseFn (Lex : ANTLR_LEXER) = struct
 
   local
-    structure Tok = 
+    structure Tok =
 HTML4Tokens
     structure UserCode =
       struct
@@ -982,735 +980,769 @@ fun cdata_opt_PROD_1_ACT (cdata, cdata_SPAN : (Lex.pos * Lex.pos), FULL_SPAN : (
     structure Err = AntlrErrHandler(
       structure Tok = Tok
       structure Lex = Lex)
+
+(* replace functor with inline structure for better optimization
     structure EBNF = AntlrEBNF(
       struct
 	type strm = Err.wstream
 	val getSpan = Err.getSpan
       end)
+*)
+    structure EBNF =
+      struct
+	fun optional (pred, parse, strm) =
+	      if pred strm
+		then let
+		  val (y, span, strm') = parse strm
+		  in
+		    (SOME y, span, strm')
+		  end
+		else (NONE, Err.getSpan strm, strm)
+
+	fun closure (pred, parse, strm) = let
+	      fun iter (strm, (left, right), ys) =
+		    if pred strm
+		      then let
+			val (y, (_, right'), strm') = parse strm
+			in iter (strm', (left, right'), y::ys)
+			end
+		      else (List.rev ys, (left, right), strm)
+	      in
+		iter (strm, Err.getSpan strm, [])
+	      end
+
+	fun posclos (pred, parse, strm) = let
+	      val (y, (left, _), strm') = parse strm
+	      val (ys, (_, right), strm'') = closure (pred, parse, strm')
+	      in
+		(y::ys, (left, right), strm'')
+	      end
+      end
 
     fun mk lexFn = let
 fun getS() = {}
 fun putS{} = ()
-fun unwrap (ret, strm, repairs) = (ret, strm, repairs)        val (eh, lex) = Err.mkErrHandler {get = getS, put = putS}
+fun unwrap (ret, strm, repairs) = (ret, strm, repairs)
+        val (eh, lex) = Err.mkErrHandler {get = getS, put = putS}
 	fun fail() = Err.failure eh
 	fun tryProds (strm, prods) = let
 	  fun try [] = fail()
-	    | try (prod :: prods) = 
-	        (Err.whileDisabled eh (fn() => prod strm)) 
+	    | try (prod :: prods) =
+	        (Err.whileDisabled eh (fn() => prod strm))
 		handle Err.ParseError => try (prods)
           in try prods end
-fun matchEOF strm = (case (lex(strm))
- of (Tok.EOF, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDVAR strm = (case (lex(strm))
- of (Tok.ENDVAR, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTVAR strm = (case (lex(strm))
- of (Tok.STARTVAR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDUL strm = (case (lex(strm))
- of (Tok.ENDUL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTUL strm = (case (lex(strm))
- of (Tok.STARTUL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDU strm = (case (lex(strm))
- of (Tok.ENDU, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTU strm = (case (lex(strm))
- of (Tok.STARTU(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTT strm = (case (lex(strm))
- of (Tok.ENDTT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTT strm = (case (lex(strm))
- of (Tok.STARTTT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTR strm = (case (lex(strm))
- of (Tok.ENDTR, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTR strm = (case (lex(strm))
- of (Tok.STARTTR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTITLE strm = (case (lex(strm))
- of (Tok.ENDTITLE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTITLE strm = (case (lex(strm))
- of (Tok.STARTTITLE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTHEAD strm = (case (lex(strm))
- of (Tok.ENDTHEAD, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTHEAD strm = (case (lex(strm))
- of (Tok.STARTTHEAD(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTH strm = (case (lex(strm))
- of (Tok.ENDTH, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTH strm = (case (lex(strm))
- of (Tok.STARTTH(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTFOOT strm = (case (lex(strm))
- of (Tok.ENDTFOOT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTFOOT strm = (case (lex(strm))
- of (Tok.STARTTFOOT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTEXTAREA strm = (case (lex(strm))
- of (Tok.ENDTEXTAREA, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTEXTAREA strm = (case (lex(strm))
- of (Tok.STARTTEXTAREA(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTD strm = (case (lex(strm))
- of (Tok.ENDTD, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTD strm = (case (lex(strm))
- of (Tok.STARTTD(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTBODY strm = (case (lex(strm))
- of (Tok.ENDTBODY, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTBODY strm = (case (lex(strm))
- of (Tok.STARTTBODY(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDTABLE strm = (case (lex(strm))
- of (Tok.ENDTABLE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTTABLE strm = (case (lex(strm))
- of (Tok.STARTTABLE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSUP strm = (case (lex(strm))
- of (Tok.ENDSUP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSUP strm = (case (lex(strm))
- of (Tok.STARTSUP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSUB strm = (case (lex(strm))
- of (Tok.ENDSUB, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSUB strm = (case (lex(strm))
- of (Tok.STARTSUB(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSTYLE strm = (case (lex(strm))
- of (Tok.ENDSTYLE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSTYLE strm = (case (lex(strm))
- of (Tok.STARTSTYLE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSTRONG strm = (case (lex(strm))
- of (Tok.ENDSTRONG, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSTRONG strm = (case (lex(strm))
- of (Tok.STARTSTRONG(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSTRIKE strm = (case (lex(strm))
- of (Tok.ENDSTRIKE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSTRIKE strm = (case (lex(strm))
- of (Tok.STARTSTRIKE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSPAN strm = (case (lex(strm))
- of (Tok.ENDSPAN, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSPAN strm = (case (lex(strm))
- of (Tok.STARTSPAN(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSMALL strm = (case (lex(strm))
- of (Tok.ENDSMALL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSMALL strm = (case (lex(strm))
- of (Tok.STARTSMALL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSELECT strm = (case (lex(strm))
- of (Tok.ENDSELECT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSELECT strm = (case (lex(strm))
- of (Tok.STARTSELECT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSCRIPT strm = (case (lex(strm))
- of (Tok.ENDSCRIPT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSCRIPT strm = (case (lex(strm))
- of (Tok.STARTSCRIPT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDSAMP strm = (case (lex(strm))
- of (Tok.ENDSAMP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTSAMP strm = (case (lex(strm))
- of (Tok.STARTSAMP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDS strm = (case (lex(strm))
- of (Tok.ENDS, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTS strm = (case (lex(strm))
- of (Tok.STARTS(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDQ strm = (case (lex(strm))
- of (Tok.ENDQ, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTQ strm = (case (lex(strm))
- of (Tok.STARTQ(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDPRE strm = (case (lex(strm))
- of (Tok.ENDPRE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTPRE strm = (case (lex(strm))
- of (Tok.STARTPRE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTPARAM strm = (case (lex(strm))
- of (Tok.STARTPARAM(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDP strm = (case (lex(strm))
- of (Tok.ENDP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTP strm = (case (lex(strm))
- of (Tok.STARTP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDOPTION strm = (case (lex(strm))
- of (Tok.ENDOPTION, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTOPTION strm = (case (lex(strm))
- of (Tok.STARTOPTION(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDOPTGROUP strm = (case (lex(strm))
- of (Tok.ENDOPTGROUP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTOPTGROUP strm = (case (lex(strm))
- of (Tok.STARTOPTGROUP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDOL strm = (case (lex(strm))
- of (Tok.ENDOL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTOL strm = (case (lex(strm))
- of (Tok.STARTOL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDOBJECT strm = (case (lex(strm))
- of (Tok.ENDOBJECT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTOBJECT strm = (case (lex(strm))
- of (Tok.STARTOBJECT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDNOSCRIPT strm = (case (lex(strm))
- of (Tok.ENDNOSCRIPT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTNOSCRIPT strm = (case (lex(strm))
- of (Tok.STARTNOSCRIPT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDNOFRAMES strm = (case (lex(strm))
- of (Tok.ENDNOFRAMES, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTNOFRAMES strm = (case (lex(strm))
- of (Tok.STARTNOFRAMES(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTMETA strm = (case (lex(strm))
- of (Tok.STARTMETA(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDMENU strm = (case (lex(strm))
- of (Tok.ENDMENU, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTMENU strm = (case (lex(strm))
- of (Tok.STARTMENU(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDMAP strm = (case (lex(strm))
- of (Tok.ENDMAP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTMAP strm = (case (lex(strm))
- of (Tok.STARTMAP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTLINK strm = (case (lex(strm))
- of (Tok.STARTLINK(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDLI strm = (case (lex(strm))
- of (Tok.ENDLI, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTLI strm = (case (lex(strm))
- of (Tok.STARTLI(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDLEGEND strm = (case (lex(strm))
- of (Tok.ENDLEGEND, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTLEGEND strm = (case (lex(strm))
- of (Tok.STARTLEGEND(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDLABEL strm = (case (lex(strm))
- of (Tok.ENDLABEL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTLABEL strm = (case (lex(strm))
- of (Tok.STARTLABEL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDKBD strm = (case (lex(strm))
- of (Tok.ENDKBD, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTKBD strm = (case (lex(strm))
- of (Tok.STARTKBD(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTISINDEX strm = (case (lex(strm))
- of (Tok.STARTISINDEX(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDINS strm = (case (lex(strm))
- of (Tok.ENDINS, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTINS strm = (case (lex(strm))
- of (Tok.STARTINS(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTINPUT strm = (case (lex(strm))
- of (Tok.STARTINPUT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTIMG strm = (case (lex(strm))
- of (Tok.STARTIMG(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDIFRAME strm = (case (lex(strm))
- of (Tok.ENDIFRAME, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTIFRAME strm = (case (lex(strm))
- of (Tok.STARTIFRAME(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDI strm = (case (lex(strm))
- of (Tok.ENDI, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTI strm = (case (lex(strm))
- of (Tok.STARTI(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDHTML strm = (case (lex(strm))
- of (Tok.ENDHTML, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTHTML strm = (case (lex(strm))
- of (Tok.STARTHTML(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTHR strm = (case (lex(strm))
- of (Tok.STARTHR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDHEAD strm = (case (lex(strm))
- of (Tok.ENDHEAD, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTHEAD strm = (case (lex(strm))
- of (Tok.STARTHEAD(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH6 strm = (case (lex(strm))
- of (Tok.ENDH6, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH6 strm = (case (lex(strm))
- of (Tok.STARTH6(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH5 strm = (case (lex(strm))
- of (Tok.ENDH5, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH5 strm = (case (lex(strm))
- of (Tok.STARTH5(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH4 strm = (case (lex(strm))
- of (Tok.ENDH4, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH4 strm = (case (lex(strm))
- of (Tok.STARTH4(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH3 strm = (case (lex(strm))
- of (Tok.ENDH3, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH3 strm = (case (lex(strm))
- of (Tok.STARTH3(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH2 strm = (case (lex(strm))
- of (Tok.ENDH2, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH2 strm = (case (lex(strm))
- of (Tok.STARTH2(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDH1 strm = (case (lex(strm))
- of (Tok.ENDH1, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTH1 strm = (case (lex(strm))
- of (Tok.STARTH1(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDFRAMESET strm = (case (lex(strm))
- of (Tok.ENDFRAMESET, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTFRAMESET strm = (case (lex(strm))
- of (Tok.STARTFRAMESET(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTFRAME strm = (case (lex(strm))
- of (Tok.STARTFRAME(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDFORM strm = (case (lex(strm))
- of (Tok.ENDFORM, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTFORM strm = (case (lex(strm))
- of (Tok.STARTFORM(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDFONT strm = (case (lex(strm))
- of (Tok.ENDFONT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTFONT strm = (case (lex(strm))
- of (Tok.STARTFONT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDFIELDSET strm = (case (lex(strm))
- of (Tok.ENDFIELDSET, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTFIELDSET strm = (case (lex(strm))
- of (Tok.STARTFIELDSET(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDEM strm = (case (lex(strm))
- of (Tok.ENDEM, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTEM strm = (case (lex(strm))
- of (Tok.STARTEM(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDT strm = (case (lex(strm))
- of (Tok.ENDDT, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDT strm = (case (lex(strm))
- of (Tok.STARTDT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDL strm = (case (lex(strm))
- of (Tok.ENDDL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDL strm = (case (lex(strm))
- of (Tok.STARTDL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDIV strm = (case (lex(strm))
- of (Tok.ENDDIV, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDIV strm = (case (lex(strm))
- of (Tok.STARTDIV(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDIR strm = (case (lex(strm))
- of (Tok.ENDDIR, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDIR strm = (case (lex(strm))
- of (Tok.STARTDIR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDFN strm = (case (lex(strm))
- of (Tok.ENDDFN, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDFN strm = (case (lex(strm))
- of (Tok.STARTDFN(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDEL strm = (case (lex(strm))
- of (Tok.ENDDEL, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDEL strm = (case (lex(strm))
- of (Tok.STARTDEL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDDD strm = (case (lex(strm))
- of (Tok.ENDDD, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTDD strm = (case (lex(strm))
- of (Tok.STARTDD(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDCOLGROUP strm = (case (lex(strm))
- of (Tok.ENDCOLGROUP, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCOLGROUP strm = (case (lex(strm))
- of (Tok.STARTCOLGROUP(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCOL strm = (case (lex(strm))
- of (Tok.STARTCOL(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDCODE strm = (case (lex(strm))
- of (Tok.ENDCODE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCODE strm = (case (lex(strm))
- of (Tok.STARTCODE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDCITE strm = (case (lex(strm))
- of (Tok.ENDCITE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCITE strm = (case (lex(strm))
- of (Tok.STARTCITE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDCENTER strm = (case (lex(strm))
- of (Tok.ENDCENTER, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCENTER strm = (case (lex(strm))
- of (Tok.STARTCENTER(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDCAPTION strm = (case (lex(strm))
- of (Tok.ENDCAPTION, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTCAPTION strm = (case (lex(strm))
- of (Tok.STARTCAPTION(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDBUTTON strm = (case (lex(strm))
- of (Tok.ENDBUTTON, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBUTTON strm = (case (lex(strm))
- of (Tok.STARTBUTTON(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBR strm = (case (lex(strm))
- of (Tok.STARTBR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDBODY strm = (case (lex(strm))
- of (Tok.ENDBODY, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBODY strm = (case (lex(strm))
- of (Tok.STARTBODY(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDBLOCKQUOTE strm = (case (lex(strm))
- of (Tok.ENDBLOCKQUOTE, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBLOCKQUOTE strm = (case (lex(strm))
- of (Tok.STARTBLOCKQUOTE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDBIG strm = (case (lex(strm))
- of (Tok.ENDBIG, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBIG strm = (case (lex(strm))
- of (Tok.STARTBIG(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDBDO strm = (case (lex(strm))
- of (Tok.ENDBDO, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBDO strm = (case (lex(strm))
- of (Tok.STARTBDO(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBASEFONT strm = (case (lex(strm))
- of (Tok.STARTBASEFONT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTBASE strm = (case (lex(strm))
- of (Tok.STARTBASE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDB strm = (case (lex(strm))
- of (Tok.ENDB, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTB strm = (case (lex(strm))
- of (Tok.STARTB(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTAREA strm = (case (lex(strm))
- of (Tok.STARTAREA(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDAPPLET strm = (case (lex(strm))
- of (Tok.ENDAPPLET, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTAPPLET strm = (case (lex(strm))
- of (Tok.STARTAPPLET(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDADDRESS strm = (case (lex(strm))
- of (Tok.ENDADDRESS, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTADDRESS strm = (case (lex(strm))
- of (Tok.STARTADDRESS(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDACRONYM strm = (case (lex(strm))
- of (Tok.ENDACRONYM, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTACRONYM strm = (case (lex(strm))
- of (Tok.STARTACRONYM(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDABBR strm = (case (lex(strm))
- of (Tok.ENDABBR, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTABBR strm = (case (lex(strm))
- of (Tok.STARTABBR(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENDA strm = (case (lex(strm))
- of (Tok.ENDA, span, strm') => ((), span, strm')
-  | _ => fail()
-(* end case *))
-fun matchSTARTA strm = (case (lex(strm))
- of (Tok.STARTA(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchXML_PROCESSING strm = (case (lex(strm))
- of (Tok.XML_PROCESSING(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchENTITY_REF strm = (case (lex(strm))
- of (Tok.ENTITY_REF(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchCHAR_REF strm = (case (lex(strm))
- of (Tok.CHAR_REF(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchDOCTYPE strm = (case (lex(strm))
- of (Tok.DOCTYPE(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchPCDATA strm = (case (lex(strm))
- of (Tok.PCDATA(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchCOMMENT strm = (case (lex(strm))
- of (Tok.COMMENT(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
-fun matchCLOSETAG strm = (case (lex(strm))
- of (Tok.CLOSETAG(x), span, strm') => (x, span, strm')
-  | _ => fail()
-(* end case *))
 fun matchOPENTAG strm = (case (lex(strm))
  of (Tok.OPENTAG(x), span, strm') => (x, span, strm')
   | _ => fail()
 (* end case *))
+fun matchCLOSETAG strm = (case (lex(strm))
+ of (Tok.CLOSETAG(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchCOMMENT strm = (case (lex(strm))
+ of (Tok.COMMENT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchPCDATA strm = (case (lex(strm))
+ of (Tok.PCDATA(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchDOCTYPE strm = (case (lex(strm))
+ of (Tok.DOCTYPE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchCHAR_REF strm = (case (lex(strm))
+ of (Tok.CHAR_REF(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENTITY_REF strm = (case (lex(strm))
+ of (Tok.ENTITY_REF(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchXML_PROCESSING strm = (case (lex(strm))
+ of (Tok.XML_PROCESSING(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTA strm = (case (lex(strm))
+ of (Tok.STARTA(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDA strm = (case (lex(strm))
+ of (Tok.ENDA, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTABBR strm = (case (lex(strm))
+ of (Tok.STARTABBR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDABBR strm = (case (lex(strm))
+ of (Tok.ENDABBR, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTACRONYM strm = (case (lex(strm))
+ of (Tok.STARTACRONYM(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDACRONYM strm = (case (lex(strm))
+ of (Tok.ENDACRONYM, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTADDRESS strm = (case (lex(strm))
+ of (Tok.STARTADDRESS(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDADDRESS strm = (case (lex(strm))
+ of (Tok.ENDADDRESS, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTAPPLET strm = (case (lex(strm))
+ of (Tok.STARTAPPLET(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDAPPLET strm = (case (lex(strm))
+ of (Tok.ENDAPPLET, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTAREA strm = (case (lex(strm))
+ of (Tok.STARTAREA(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTB strm = (case (lex(strm))
+ of (Tok.STARTB(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDB strm = (case (lex(strm))
+ of (Tok.ENDB, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBASE strm = (case (lex(strm))
+ of (Tok.STARTBASE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBASEFONT strm = (case (lex(strm))
+ of (Tok.STARTBASEFONT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBDO strm = (case (lex(strm))
+ of (Tok.STARTBDO(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDBDO strm = (case (lex(strm))
+ of (Tok.ENDBDO, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBIG strm = (case (lex(strm))
+ of (Tok.STARTBIG(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDBIG strm = (case (lex(strm))
+ of (Tok.ENDBIG, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBLOCKQUOTE strm = (case (lex(strm))
+ of (Tok.STARTBLOCKQUOTE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDBLOCKQUOTE strm = (case (lex(strm))
+ of (Tok.ENDBLOCKQUOTE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBODY strm = (case (lex(strm))
+ of (Tok.STARTBODY(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDBODY strm = (case (lex(strm))
+ of (Tok.ENDBODY, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBR strm = (case (lex(strm))
+ of (Tok.STARTBR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTBUTTON strm = (case (lex(strm))
+ of (Tok.STARTBUTTON(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDBUTTON strm = (case (lex(strm))
+ of (Tok.ENDBUTTON, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCAPTION strm = (case (lex(strm))
+ of (Tok.STARTCAPTION(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDCAPTION strm = (case (lex(strm))
+ of (Tok.ENDCAPTION, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCENTER strm = (case (lex(strm))
+ of (Tok.STARTCENTER(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDCENTER strm = (case (lex(strm))
+ of (Tok.ENDCENTER, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCITE strm = (case (lex(strm))
+ of (Tok.STARTCITE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDCITE strm = (case (lex(strm))
+ of (Tok.ENDCITE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCODE strm = (case (lex(strm))
+ of (Tok.STARTCODE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDCODE strm = (case (lex(strm))
+ of (Tok.ENDCODE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCOL strm = (case (lex(strm))
+ of (Tok.STARTCOL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTCOLGROUP strm = (case (lex(strm))
+ of (Tok.STARTCOLGROUP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDCOLGROUP strm = (case (lex(strm))
+ of (Tok.ENDCOLGROUP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDD strm = (case (lex(strm))
+ of (Tok.STARTDD(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDD strm = (case (lex(strm))
+ of (Tok.ENDDD, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDEL strm = (case (lex(strm))
+ of (Tok.STARTDEL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDEL strm = (case (lex(strm))
+ of (Tok.ENDDEL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDFN strm = (case (lex(strm))
+ of (Tok.STARTDFN(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDFN strm = (case (lex(strm))
+ of (Tok.ENDDFN, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDIR strm = (case (lex(strm))
+ of (Tok.STARTDIR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDIR strm = (case (lex(strm))
+ of (Tok.ENDDIR, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDIV strm = (case (lex(strm))
+ of (Tok.STARTDIV(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDIV strm = (case (lex(strm))
+ of (Tok.ENDDIV, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDL strm = (case (lex(strm))
+ of (Tok.STARTDL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDL strm = (case (lex(strm))
+ of (Tok.ENDDL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTDT strm = (case (lex(strm))
+ of (Tok.STARTDT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDDT strm = (case (lex(strm))
+ of (Tok.ENDDT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTEM strm = (case (lex(strm))
+ of (Tok.STARTEM(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDEM strm = (case (lex(strm))
+ of (Tok.ENDEM, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTFIELDSET strm = (case (lex(strm))
+ of (Tok.STARTFIELDSET(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDFIELDSET strm = (case (lex(strm))
+ of (Tok.ENDFIELDSET, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTFONT strm = (case (lex(strm))
+ of (Tok.STARTFONT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDFONT strm = (case (lex(strm))
+ of (Tok.ENDFONT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTFORM strm = (case (lex(strm))
+ of (Tok.STARTFORM(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDFORM strm = (case (lex(strm))
+ of (Tok.ENDFORM, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTFRAME strm = (case (lex(strm))
+ of (Tok.STARTFRAME(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTFRAMESET strm = (case (lex(strm))
+ of (Tok.STARTFRAMESET(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDFRAMESET strm = (case (lex(strm))
+ of (Tok.ENDFRAMESET, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH1 strm = (case (lex(strm))
+ of (Tok.STARTH1(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH1 strm = (case (lex(strm))
+ of (Tok.ENDH1, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH2 strm = (case (lex(strm))
+ of (Tok.STARTH2(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH2 strm = (case (lex(strm))
+ of (Tok.ENDH2, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH3 strm = (case (lex(strm))
+ of (Tok.STARTH3(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH3 strm = (case (lex(strm))
+ of (Tok.ENDH3, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH4 strm = (case (lex(strm))
+ of (Tok.STARTH4(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH4 strm = (case (lex(strm))
+ of (Tok.ENDH4, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH5 strm = (case (lex(strm))
+ of (Tok.STARTH5(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH5 strm = (case (lex(strm))
+ of (Tok.ENDH5, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTH6 strm = (case (lex(strm))
+ of (Tok.STARTH6(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDH6 strm = (case (lex(strm))
+ of (Tok.ENDH6, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTHEAD strm = (case (lex(strm))
+ of (Tok.STARTHEAD(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDHEAD strm = (case (lex(strm))
+ of (Tok.ENDHEAD, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTHR strm = (case (lex(strm))
+ of (Tok.STARTHR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTHTML strm = (case (lex(strm))
+ of (Tok.STARTHTML(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDHTML strm = (case (lex(strm))
+ of (Tok.ENDHTML, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTI strm = (case (lex(strm))
+ of (Tok.STARTI(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDI strm = (case (lex(strm))
+ of (Tok.ENDI, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTIFRAME strm = (case (lex(strm))
+ of (Tok.STARTIFRAME(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDIFRAME strm = (case (lex(strm))
+ of (Tok.ENDIFRAME, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTIMG strm = (case (lex(strm))
+ of (Tok.STARTIMG(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTINPUT strm = (case (lex(strm))
+ of (Tok.STARTINPUT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTINS strm = (case (lex(strm))
+ of (Tok.STARTINS(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDINS strm = (case (lex(strm))
+ of (Tok.ENDINS, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTISINDEX strm = (case (lex(strm))
+ of (Tok.STARTISINDEX(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTKBD strm = (case (lex(strm))
+ of (Tok.STARTKBD(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDKBD strm = (case (lex(strm))
+ of (Tok.ENDKBD, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTLABEL strm = (case (lex(strm))
+ of (Tok.STARTLABEL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDLABEL strm = (case (lex(strm))
+ of (Tok.ENDLABEL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTLEGEND strm = (case (lex(strm))
+ of (Tok.STARTLEGEND(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDLEGEND strm = (case (lex(strm))
+ of (Tok.ENDLEGEND, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTLI strm = (case (lex(strm))
+ of (Tok.STARTLI(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDLI strm = (case (lex(strm))
+ of (Tok.ENDLI, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTLINK strm = (case (lex(strm))
+ of (Tok.STARTLINK(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTMAP strm = (case (lex(strm))
+ of (Tok.STARTMAP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDMAP strm = (case (lex(strm))
+ of (Tok.ENDMAP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTMENU strm = (case (lex(strm))
+ of (Tok.STARTMENU(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDMENU strm = (case (lex(strm))
+ of (Tok.ENDMENU, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTMETA strm = (case (lex(strm))
+ of (Tok.STARTMETA(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTNOFRAMES strm = (case (lex(strm))
+ of (Tok.STARTNOFRAMES(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDNOFRAMES strm = (case (lex(strm))
+ of (Tok.ENDNOFRAMES, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTNOSCRIPT strm = (case (lex(strm))
+ of (Tok.STARTNOSCRIPT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDNOSCRIPT strm = (case (lex(strm))
+ of (Tok.ENDNOSCRIPT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTOBJECT strm = (case (lex(strm))
+ of (Tok.STARTOBJECT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDOBJECT strm = (case (lex(strm))
+ of (Tok.ENDOBJECT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTOL strm = (case (lex(strm))
+ of (Tok.STARTOL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDOL strm = (case (lex(strm))
+ of (Tok.ENDOL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTOPTGROUP strm = (case (lex(strm))
+ of (Tok.STARTOPTGROUP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDOPTGROUP strm = (case (lex(strm))
+ of (Tok.ENDOPTGROUP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTOPTION strm = (case (lex(strm))
+ of (Tok.STARTOPTION(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDOPTION strm = (case (lex(strm))
+ of (Tok.ENDOPTION, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTP strm = (case (lex(strm))
+ of (Tok.STARTP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDP strm = (case (lex(strm))
+ of (Tok.ENDP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTPARAM strm = (case (lex(strm))
+ of (Tok.STARTPARAM(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTPRE strm = (case (lex(strm))
+ of (Tok.STARTPRE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDPRE strm = (case (lex(strm))
+ of (Tok.ENDPRE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTQ strm = (case (lex(strm))
+ of (Tok.STARTQ(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDQ strm = (case (lex(strm))
+ of (Tok.ENDQ, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTS strm = (case (lex(strm))
+ of (Tok.STARTS(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDS strm = (case (lex(strm))
+ of (Tok.ENDS, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSAMP strm = (case (lex(strm))
+ of (Tok.STARTSAMP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSAMP strm = (case (lex(strm))
+ of (Tok.ENDSAMP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSCRIPT strm = (case (lex(strm))
+ of (Tok.STARTSCRIPT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSCRIPT strm = (case (lex(strm))
+ of (Tok.ENDSCRIPT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSELECT strm = (case (lex(strm))
+ of (Tok.STARTSELECT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSELECT strm = (case (lex(strm))
+ of (Tok.ENDSELECT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSMALL strm = (case (lex(strm))
+ of (Tok.STARTSMALL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSMALL strm = (case (lex(strm))
+ of (Tok.ENDSMALL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSPAN strm = (case (lex(strm))
+ of (Tok.STARTSPAN(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSPAN strm = (case (lex(strm))
+ of (Tok.ENDSPAN, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSTRIKE strm = (case (lex(strm))
+ of (Tok.STARTSTRIKE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSTRIKE strm = (case (lex(strm))
+ of (Tok.ENDSTRIKE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSTRONG strm = (case (lex(strm))
+ of (Tok.STARTSTRONG(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSTRONG strm = (case (lex(strm))
+ of (Tok.ENDSTRONG, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSTYLE strm = (case (lex(strm))
+ of (Tok.STARTSTYLE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSTYLE strm = (case (lex(strm))
+ of (Tok.ENDSTYLE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSUB strm = (case (lex(strm))
+ of (Tok.STARTSUB(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSUB strm = (case (lex(strm))
+ of (Tok.ENDSUB, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTSUP strm = (case (lex(strm))
+ of (Tok.STARTSUP(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDSUP strm = (case (lex(strm))
+ of (Tok.ENDSUP, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTABLE strm = (case (lex(strm))
+ of (Tok.STARTTABLE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTABLE strm = (case (lex(strm))
+ of (Tok.ENDTABLE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTBODY strm = (case (lex(strm))
+ of (Tok.STARTTBODY(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTBODY strm = (case (lex(strm))
+ of (Tok.ENDTBODY, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTD strm = (case (lex(strm))
+ of (Tok.STARTTD(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTD strm = (case (lex(strm))
+ of (Tok.ENDTD, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTEXTAREA strm = (case (lex(strm))
+ of (Tok.STARTTEXTAREA(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTEXTAREA strm = (case (lex(strm))
+ of (Tok.ENDTEXTAREA, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTFOOT strm = (case (lex(strm))
+ of (Tok.STARTTFOOT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTFOOT strm = (case (lex(strm))
+ of (Tok.ENDTFOOT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTH strm = (case (lex(strm))
+ of (Tok.STARTTH(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTH strm = (case (lex(strm))
+ of (Tok.ENDTH, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTHEAD strm = (case (lex(strm))
+ of (Tok.STARTTHEAD(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTHEAD strm = (case (lex(strm))
+ of (Tok.ENDTHEAD, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTITLE strm = (case (lex(strm))
+ of (Tok.STARTTITLE(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTITLE strm = (case (lex(strm))
+ of (Tok.ENDTITLE, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTR strm = (case (lex(strm))
+ of (Tok.STARTTR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTR strm = (case (lex(strm))
+ of (Tok.ENDTR, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTTT strm = (case (lex(strm))
+ of (Tok.STARTTT(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDTT strm = (case (lex(strm))
+ of (Tok.ENDTT, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTU strm = (case (lex(strm))
+ of (Tok.STARTU(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDU strm = (case (lex(strm))
+ of (Tok.ENDU, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTUL strm = (case (lex(strm))
+ of (Tok.STARTUL(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDUL strm = (case (lex(strm))
+ of (Tok.ENDUL, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchSTARTVAR strm = (case (lex(strm))
+ of (Tok.STARTVAR(x), span, strm') => (x, span, strm')
+  | _ => fail()
+(* end case *))
+fun matchENDVAR strm = (case (lex(strm))
+ of (Tok.ENDVAR, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
+fun matchEOF strm = (case (lex(strm))
+ of (Tok.EOF, span, strm') => ((), span, strm')
+  | _ => fail()
+(* end case *))
 
 val (document_NT, body_NT, flow_NT, block_NT, inline_NT, cdata_opt_NT) = 
 let
diff --git a/HTML4/pp-init.sml b/HTML4/pp-init.sml
new file mode 100644
index 0000000..ca97b62
--- /dev/null
+++ b/HTML4/pp-init.sml
@@ -0,0 +1,67 @@
+ (* pp-init.sml
+ *
+ * COPYRIGHT (c) 2003 The SML/NJ Fellowship
+ *
+ * An implementation of SML/NJ's PP interface.
+ *   - This is an (almost) literal copy of the original code in
+ *     smlnj-lib/PP/examples/old-pp.sml
+ *)
+
+
+signature PRETTYPRINT =
+sig
+  include PP_STREAM
+  val with_pp : device -> (stream -> unit) -> unit
+  val pp_to_string : int -> (stream -> 'a -> unit) -> 'a -> string
+end
+
+structure PrettyPrint : PRETTYPRINT =
+struct
+
+  type ppconsumer = {
+      consumer : string -> unit,
+      linewidth : int,
+      flush : unit -> unit
+    }
+
+  structure Dev =
+  struct
+    type device = ppconsumer
+    type style = unit
+    fun sameStyle _ = true
+    fun pushStyle _ = ()
+    fun popStyle _ = ()
+    fun defaultStyle _ = ()
+    fun depth _ = NONE
+    fun lineWidth {consumer, linewidth, flush} = SOME linewidth
+    fun textWidth _ = NONE
+    fun space ({consumer, linewidth, flush}, n) =
+          consumer (StringCvt.padLeft #" " n "")
+    fun newline {consumer, linewidth, flush} = consumer "\n"
+    fun string ({consumer, linewidth, flush}, s) = consumer s
+    fun char ({consumer, linewidth, flush}, c) = consumer(str c)
+    fun flush {consumer, linewidth, flush} = flush()
+  end
+
+  structure PP = PPStreamFn
+      (structure Token = StringToken
+       structure Device = Dev)
+
+  open PP
+
+  fun with_pp device (f: PP.stream -> unit) =
+      let val ppstrm = PP.openStream device
+       in f ppstrm;
+          PP.closeStream ppstrm
+      end
+
+  fun pp_to_string wid ppFn obj =
+      let val l = ref ([] : string list)
+          fun attach s = l := s :: !l
+          val device = {consumer = attach, linewidth = wid, flush = fn()=>()}
+       in with_pp device
+            (fn ppStrm => ppFn ppStrm obj);
+          String.concat(List.rev(!l))
+      end
+
+end (* structure PrettyPrint *)
diff --git a/HashCons/hash-cons-lib.mlb b/HashCons/hash-cons-lib.mlb
new file mode 100644
index 0000000..d7d2a24
--- /dev/null
+++ b/HashCons/hash-cons-lib.mlb
@@ -0,0 +1,145 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l8 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l4 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = PrimeSizes
+   end
+   local
+      open l8
+   in
+      structure gs_1 = Array
+   end
+   local
+      open l8
+   in
+      structure gs_2 = Word
+   end
+   local
+      open l8
+   in
+      structure gs_3 = List
+   end
+   local
+      hash-cons-sig.sml
+   in
+      signature gs_4 = HASH_CONS
+   end
+   local
+      structure Array = gs_1
+      signature HASH_CONS = gs_4
+      structure List = gs_3
+      structure PrimeSizes = gs_0
+      structure Word = gs_2
+      hash-cons.sml
+   in
+      structure gs_5 = HashCons
+   end
+   local
+      structure HashCons = gs_5
+      hash-cons-set-sig.sml
+   in
+      signature gs_6 = HASH_CONS_SET
+   end
+   local
+      structure HashCons = gs_5
+      hash-cons-map-sig.sml
+   in
+      signature gs_7 = HASH_CONS_MAP
+   end
+   local
+      open l4
+   in
+      structure gs_8 = WordRedBlackMap
+   end
+   local
+      signature HASH_CONS_SET = gs_6
+      structure HashCons = gs_5
+      structure List = gs_3
+      structure WordRedBlackMap = gs_8
+      hash-cons-set.sml
+   in
+      structure gs_9 = HashConsSet
+   end
+   local
+      open l8
+   in
+      structure gs_10 = Option
+   end
+   local
+      signature HASH_CONS_MAP = gs_7
+      structure HashCons = gs_5
+      structure Option = gs_10
+      structure WordRedBlackMap = gs_8
+      hash-cons-map.sml
+   in
+      structure gs_11 = HashConsMap
+   end
+   local
+      open l4
+   in
+      structure gs_12 = HashString
+   end
+   local
+      open l4
+   in
+      signature gs_13 = HASH_KEY
+   end
+   local
+      signature HASH_KEY = gs_13
+      structure HashCons = gs_5
+      hash-cons-ground-fn.sml
+   in
+      functor gs_14 = HashConsGroundFn
+   end
+   local
+      functor HashConsGroundFn = gs_14
+      structure HashString = gs_12
+      hash-cons-string.sml
+   in
+      structure gs_15 = HashConsString
+   end
+   local
+      open l4
+   in
+      structure gs_16 = Atom
+   end
+   local
+      structure Atom = gs_16
+      functor HashConsGroundFn = gs_14
+      hash-cons-atom.sml
+   in
+      structure gs_17 = HashConsAtom
+   end
+in
+   signature HASH_CONS = gs_4
+   signature HASH_CONS_MAP = gs_7
+   signature HASH_CONS_SET = gs_6
+   structure HashCons = gs_5
+   structure HashConsAtom = gs_17
+   functor HashConsGroundFn = gs_14
+   structure HashConsMap = gs_11
+   structure HashConsSet = gs_9
+   structure HashConsString = gs_15
+end
+end
+
+end
diff --git a/INet/inet-lib.mlb b/INet/inet-lib.mlb
new file mode 100644
index 0000000..8e91bef
--- /dev/null
+++ b/INet/inet-lib.mlb
@@ -0,0 +1,145 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l31 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = StringCvt
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Word8Array
+   end
+   local
+      open l4
+   in
+      structure gs_2 = Word8Vector
+   end
+   local
+      open l4
+   in
+      structure gs_3 = NetHostDB
+   end
+   local
+      open l4
+   in
+      structure gs_4 = Socket
+   end
+   local
+      open l4
+   in
+      structure gs_5 = INetSock
+   end
+   local
+      structure INetSock = gs_5
+      structure NetHostDB = gs_3
+      structure Socket = gs_4
+      structure StringCvt = gs_0
+      structure Word8Array = gs_1
+      structure Word8Vector = gs_2
+      sock-util-sig.sml
+   in
+      signature gs_6 = SOCK_UTIL
+   end
+   local
+      open l4
+   in
+      structure gs_7 = UnixSock
+   end
+   local
+      open l31
+   in
+      structure gs_8 = ParserComb
+   end
+   local
+      open l4
+   in
+      structure gs_9 = Char
+   end
+   local
+      open l4
+   in
+      structure gs_10 = Word8VectorSlice
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Word8ArraySlice
+   end
+   local
+      open l4
+   in
+      structure gs_12 = NetServDB
+   end
+   local
+      open l4
+   in
+      structure gs_13 = Byte
+   end
+   local
+      open l4
+   in
+      structure gs_14 = Int
+   end
+   local
+      open l4
+   in
+      structure gs_15 = OS
+   end
+   local
+      structure Byte = gs_13
+      structure Char = gs_9
+      structure INetSock = gs_5
+      structure Int = gs_14
+      structure NetHostDB = gs_3
+      structure NetServDB = gs_12
+      structure OS = gs_15
+      structure ParserComb = gs_8
+      signature SOCK_UTIL = gs_6
+      structure Socket = gs_4
+      structure StringCvt = gs_0
+      structure Word8Array = gs_1
+      structure Word8ArraySlice = gs_11
+      structure Word8Vector = gs_2
+      structure Word8VectorSlice = gs_10
+      sock-util.sml
+   in
+      structure gs_16 = SockUtil
+   end
+   local
+      signature SOCK_UTIL = gs_6
+      structure SockUtil = gs_16
+      structure Socket = gs_4
+      structure UnixSock = gs_7
+      unix-sock-util.sml
+   in
+      signature gs_17 = UNIX_SOCK_UTIL
+      structure gs_18 = UnixSockUtil
+   end
+in
+   signature SOCK_UTIL = gs_6
+   structure SockUtil = gs_16
+   signature UNIX_SOCK_UTIL = gs_17
+   structure UnixSockUtil = gs_18
+end
+end
+
+end
diff --git a/JSON/json-lib.mlb b/JSON/json-lib.mlb
index ff960d3..cda206f 100644
--- a/JSON/json-lib.mlb
+++ b/JSON/json-lib.mlb
@@ -1,47 +1,203 @@
-(* json-lib.mlb
- *
- * COPYRIGHT (c) 2008 The Fellowship of SML/NJ (http://www.smlnj.org)
- * All rights reserved.
- *
- * An MLB file for the JSON library, so that it can be used by MLton programs.
- *
- * TODO:
- *	This is not complete, since MLton does not have the ml-lpt-lib yet.
- *)
-
-local
-
-  $(SML_LIB)/basis/basis.mlb
-  $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
-  $(SML_LIB)/mllpt-lib/ml-lpt-lib.mlb
-
-  ann
-    "nonexhaustiveMatch warn" "redundantMatch warn"
-    "sequenceNonUnit ignore"
-    "warnUnused false" "forceUsed"
-  in
-
-    json-tokens.sml
-    json.lex.sml
-    json.sml
-    json-stream-parser.sml
-    json-parser.sml
-    json-stream-printer.sml
-    json-printer.sml
-    json-util.sml
-
-  end
 
+ann
+  "nonexhaustiveBind ignore" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
 in
 
-(* DOM-style API (tree based) *)
-  structure JSON
-  structure JSONParser
-  structure JSONPrinter
-  structure JSONUtil
-
-(* SAX-style API (event based) *)
-  structure JSONStreamParser
-  structure JSONStreamPrinter
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l75 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l8 =
+    bas
+      (* $/ml-lpt-lib.cm ====> *) $(SML_LIB)/mllpt-lib/mllpt-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = IntInf
+   end
+   local
+      open l8
+   in
+      structure gs_1 = AntlrStreamPos
+   end
+   local
+      open l4
+   in
+      structure gs_2 = TextIO
+   end
+   local
+      open l4
+   in
+      structure gs_3 = String
+   end
+   local
+      open l8
+   in
+      structure gs_4 = UTF8
+   end
+   local
+      open l4
+   in
+      structure gs_5 = Real
+   end
+   local
+      open l4
+   in
+      structure gs_6 = List
+   end
+   local
+      structure IntInf = gs_0
+      structure List = gs_6
+      structure Real = gs_5
+      structure String = gs_3
+      structure UTF8 = gs_4
+      json-tokens.sml
+   in
+      structure gs_7 = JSONTokens
+   end
+   local
+      open l4
+   in
+      structure gs_8 = StringCvt
+   end
+   local
+      open l4
+   in
+      structure gs_9 = LargeReal
+   end
+   local
+      open l4
+   in
+      structure gs_10 = Substring
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Vector
+   end
+   local
+      open l8
+   in
+      structure gs_12 = ULexBuffer
+   end
+   local
+      open l4
+   in
+      structure gs_13 = Word
+   end
+   local
+      structure AntlrStreamPos = gs_1
+      structure IntInf = gs_0
+      structure JSONTokens = gs_7
+      structure LargeReal = gs_9
+      structure List = gs_6
+      structure String = gs_3
+      structure StringCvt = gs_8
+      structure Substring = gs_10
+      structure TextIO = gs_2
+      structure ULexBuffer = gs_12
+      structure UTF8 = gs_4
+      structure Vector = gs_11
+      structure Word = gs_13
+      json.lex.sml
+   in
+      structure gs_14 = JSONLexer
+   end
+   local
+      structure AntlrStreamPos = gs_1
+      structure IntInf = gs_0
+      structure JSONLexer = gs_14
+      structure JSONTokens = gs_7
+      structure TextIO = gs_2
+      json-stream-parser.sml
+   in
+      structure gs_15 = JSONStreamParser
+   end
+   local
+      structure IntInf = gs_0
+      json.sml
+   in
+      structure gs_16 = JSON
+   end
+   local
+      structure AntlrStreamPos = gs_1
+      structure JSON = gs_16
+      structure JSONLexer = gs_14
+      structure JSONTokens = gs_7
+      structure List = gs_6
+      structure TextIO = gs_2
+      json-parser.sml
+   in
+      structure gs_17 = JSONParser
+   end
+   local
+      open l4
+   in
+      structure gs_18 = General
+   end
+   local
+      open l4
+   in
+      structure gs_19 = Int
+   end
+   local
+      structure General = gs_18
+      structure Int = gs_19
+      structure IntInf = gs_0
+      structure JSON = gs_16
+      structure List = gs_6
+      structure Real = gs_5
+      structure String = gs_3
+      structure Vector = gs_11
+      json-util.sml
+   in
+      structure gs_20 = JSONUtil
+   end
+   local
+      open l75
+   in
+      structure gs_21 = Format
+   end
+   local
+      structure Format = gs_21
+      structure IntInf = gs_0
+      structure List = gs_6
+      structure String = gs_3
+      structure TextIO = gs_2
+      structure UTF8 = gs_4
+      json-stream-printer.sml
+   in
+      structure gs_22 = JSONStreamPrinter
+   end
+   local
+      structure JSON = gs_16
+      structure JSONStreamPrinter = gs_22
+      structure List = gs_6
+      structure TextIO = gs_2
+      json-printer.sml
+   in
+      structure gs_23 = JSONPrinter
+   end
+in
+   structure JSON = gs_16
+   structure JSONParser = gs_17
+   structure JSONPrinter = gs_23
+   structure JSONStreamParser = gs_15
+   structure JSONStreamPrinter = gs_22
+   structure JSONUtil = gs_20
+end
+end
 
 end
diff --git a/JSON/json.lex.sml b/JSON/json.lex.sml
index 87e5f17..d488353 100644
--- a/JSON/json.lex.sml
+++ b/JSON/json.lex.sml
@@ -2,6 +2,8 @@ structure JSONLexer  = struct
 
     datatype yystart_state = 
 S | INITIAL
+    local
+
     structure UserDeclarations = 
       struct
 
@@ -23,10 +25,8 @@ S | INITIAL
 	end
   fun finishString () = (T.STRING(String.concat(List.rev(!sbuf))) before sbuf := [])
 
-
       end
 
-    local
     datatype yymatch 
       = yyNO_MATCH
       | yyMATCH of ULexBuffer.stream * action * yymatch
@@ -70,7 +70,7 @@ Vector.fromList []
         (* start position of token -- can be updated via skip() *)
 	  val yystartPos = ref (yygetPos())
 	(* get one char of input *)
-	  fun yygetc strm = (case UTF8.getu ULexBuffer.getc strm
+	  fun yygetc strm = (case ULexBuffer.getu strm
                 of (SOME (0w10, s')) => 
 		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
 		      SOME (0w10, s'))
@@ -104,7 +104,7 @@ Vector.fromList []
 		(fn (~1, _, oldMatches) => yystuck oldMatches
 		  | (curState, strm, oldMatches) => let
 		      val (transitions, finals') = Vector.sub (yytable, curState)
-		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
+		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
 		      fun tryfinal() = 
 		            yystuck (yyactsToMatches (strm, finals, oldMatches))
 		      fun find (c, []) = NONE
diff --git a/PP/pp-lib.mlb b/PP/pp-lib.mlb
new file mode 100644
index 0000000..6619100
--- /dev/null
+++ b/PP/pp-lib.mlb
@@ -0,0 +1,213 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l26 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l83 =
+    bas
+      (* $/html-lib.cm ====> *) $(SML_LIB)/smlnj-lib/HTML/html-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = TextIO
+   end
+   local
+      src/pp-stream-sig.sml
+   in
+      signature gs_1 = PP_STREAM
+   end
+   local
+      signature PP_STREAM = gs_1
+      structure TextIO = gs_0
+      src/pp-debug-fn.sml
+   in
+      functor gs_2 = PPDebugFn
+   end
+   local
+      src/pp-device-sig.sml
+   in
+      signature gs_3 = PP_DEVICE
+   end
+   local
+      open l4
+   in
+      structure gs_4 = StringCvt
+   end
+   local
+      signature PP_DEVICE = gs_3
+      structure StringCvt = gs_4
+      structure TextIO = gs_0
+      devices/simple-textio-dev.sml
+   in
+      structure gs_5 = SimpleTextIODev
+   end
+   local
+      open l26
+   in
+      structure gs_6 = Format
+   end
+   local
+      open l26
+   in
+      structure gs_7 = Queue
+   end
+   local
+      open l26
+   in
+      structure gs_8 = ListFormat
+   end
+   local
+      open l4
+   in
+      structure gs_9 = String
+   end
+   local
+      open l4
+   in
+      structure gs_10 = Option
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Int
+   end
+   local
+      src/pp-token-sig.sml
+   in
+      signature gs_12 = PP_TOKEN
+   end
+   local
+      structure Format = gs_6
+      structure Int = gs_11
+      structure ListFormat = gs_8
+      structure Option = gs_10
+      signature PP_DEVICE = gs_3
+      signature PP_STREAM = gs_1
+      signature PP_TOKEN = gs_12
+      structure Queue = gs_7
+      structure String = gs_9
+      structure TextIO = gs_0
+      src/pp-stream-fn.sml
+   in
+      functor gs_13 = PPStreamFn
+   end
+   local
+      signature PP_STREAM = gs_1
+      src/pp-desc-sig.sml
+   in
+      signature gs_14 = PP_DESC
+   end
+   local
+      signature PP_DESC = gs_14
+      signature PP_STREAM = gs_1
+      src/pp-desc-fn.sml
+   in
+      functor gs_15 = PPDescFn
+   end
+   local
+      signature PP_TOKEN = gs_12
+      structure String = gs_9
+      devices/string-token.sml
+   in
+      structure gs_16 = StringToken
+   end
+   local
+      functor PPStreamFn = gs_13
+      signature PP_STREAM = gs_1
+      structure SimpleTextIODev = gs_5
+      structure StringToken = gs_16
+      structure TextIO = gs_0
+      devices/textio-pp.sml
+   in
+      structure gs_17 = TextIOPP
+   end
+   local
+      open l26
+   in
+      structure gs_18 = ANSITerm
+   end
+   local
+      open l4
+   in
+      structure gs_19 = TextPrimIO
+   end
+   local
+      open l4
+   in
+      structure gs_20 = OS
+   end
+   local
+      structure ANSITerm = gs_18
+      structure OS = gs_20
+      signature PP_DEVICE = gs_3
+      structure StringCvt = gs_4
+      structure TextIO = gs_0
+      structure TextPrimIO = gs_19
+      devices/ansi-term-dev.sml
+   in
+      structure gs_21 = ANSITermDev
+   end
+   local
+      open l4
+   in
+      structure gs_22 = List
+   end
+   local
+      open l83
+   in
+      structure gs_23 = HTML
+   end
+   local
+      structure HTML = gs_23
+      structure List = gs_22
+      signature PP_DEVICE = gs_3
+      structure String = gs_9
+      devices/html-dev.sml
+   in
+      structure gs_24 = HTMLDev
+   end
+   local
+      structure ANSITermDev = gs_21
+      functor PPStreamFn = gs_13
+      signature PP_STREAM = gs_1
+      signature PP_TOKEN = gs_12
+      structure String = gs_9
+      structure TextIO = gs_0
+      devices/ansi-term-pp.sml
+   in
+      structure gs_25 = ANSITermPP
+   end
+in
+   structure ANSITermDev = gs_21
+   structure ANSITermPP = gs_25
+   structure HTMLDev = gs_24
+   functor PPDebugFn = gs_2
+   functor PPDescFn = gs_15
+   functor PPStreamFn = gs_13
+   signature PP_DESC = gs_14
+   signature PP_DEVICE = gs_3
+   signature PP_STREAM = gs_1
+   signature PP_TOKEN = gs_12
+   structure SimpleTextIODev = gs_5
+   structure StringToken = gs_16
+   structure TextIOPP = gs_17
+end
+end
+
+end
diff --git a/README.mlton b/README.mlton
new file mode 100644
index 0000000..96eeebc
--- /dev/null
+++ b/README.mlton
@@ -0,0 +1,11 @@
+The following changes were made to the SML/NJ Library, in addition to
+deriving the `.mlb` files from the `.cm` files:
+
+* `HTML4/pp-init.sml` (added): Implements `structure PrettyPrint` using the SML/NJ PP Library.  This implementation is taken from the SML/NJ compiler source, since the SML/NJ HTML4 Library used the `structure PrettyPrint` provided by the SML/NJ compiler itself.
+* `Util/base64.sml` (modified): Rewrote use of `Unsafe.CharVector.create` and `Unsafe.CharVector.update`; MLton assumes that vectors are immutable.
+* `Util/engine.mlton.sml` (added, not exported): Implements `structure Engine`, providing time-limited, resumable computations using <:MLtonThread:>, <:MLtonSignal:>, and <:MLtonItimer:>.
+* `Util/graph-scc-fn.sml` (modified): Rewrote use of `where` structure specification.
+* `Util/redblack-map-fn.sml` (modified): Rewrote use of `where` structure specification.
+* `Util/redblack-set-fn.sml` (modified): Rewrote use of `where` structure specification.
+* `Util/time-limit.mlb` (added): Exports `structure TimeLimit`, which is _not_ exported by `smlnj-lib.mlb`.  Since MLton is very conservative in the presence of threads and signals, program performance may be adversely affected by unnecessarily including `structure TimeLimit`.
+* `Util/time-limit.mlton.sml` (added): Implements `structure TimeLimit` using `structure Engine`.  The SML/NJ implementation of `structure TimeLimit` uses SML/NJ's first-class continuations, signals, and interval timer.
diff --git a/Reactive/reactive-lib.mlb b/Reactive/reactive-lib.mlb
new file mode 100644
index 0000000..ceb3bff
--- /dev/null
+++ b/Reactive/reactive-lib.mlb
@@ -0,0 +1,72 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l14 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l4 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = Atom
+   end
+   local
+      structure Atom = gs_0
+      reactive-sig.sml
+   in
+      signature gs_1 = REACTIVE
+   end
+   local
+      open l4
+   in
+      structure gs_2 = AtomBinaryMap
+   end
+   local
+      open l14
+   in
+      structure gs_3 = List
+   end
+   local
+      structure Atom = gs_0
+      instruction.sml
+   in
+      structure gs_4 = Instruction
+   end
+   local
+      structure Atom = gs_0
+      structure Instruction = gs_4
+      structure List = gs_3
+      machine.sml
+   in
+      structure gs_5 = Machine
+   end
+   local
+      structure AtomBinaryMap = gs_2
+      structure Instruction = gs_4
+      structure List = gs_3
+      structure Machine = gs_5
+      signature REACTIVE = gs_1
+      reactive.sml
+   in
+      structure gs_6 = Reactive
+   end
+in
+   signature REACTIVE = gs_1
+   structure Reactive = gs_6
+end
+end
+
+end
diff --git a/RegExp/regexp-lib.mlb b/RegExp/regexp-lib.mlb
new file mode 100644
index 0000000..3c701d6
--- /dev/null
+++ b/RegExp/regexp-lib.mlb
@@ -0,0 +1,236 @@
+
+ann
+  "nonexhaustiveBind ignore" "nonexhaustiveMatch ignore"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l16 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = StringCvt
+   end
+   local
+      open l4
+   in
+      structure gs_1 = List
+   end
+   local
+      structure List = gs_1
+      Glue/match-tree.sml
+   in
+      signature gs_2 = MATCH_TREE
+      structure gs_3 = MatchTree
+   end
+   local
+      open l16
+   in
+      functor gs_4 = ListSetFn
+   end
+   local
+      open l4
+   in
+      structure gs_5 = Char
+   end
+   local
+      open l16
+   in
+      signature gs_6 = ORD_SET
+   end
+   local
+      signature ORD_SET = gs_6
+      FrontEnd/syntax-sig.sml
+   in
+      signature gs_7 = REGEXP_SYNTAX
+   end
+   local
+      structure Char = gs_5
+      structure List = gs_1
+      functor ListSetFn = gs_4
+      signature REGEXP_SYNTAX = gs_7
+      FrontEnd/syntax.sml
+   in
+      structure gs_8 = RegExpSyntax
+   end
+   local
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      structure RegExpSyntax = gs_8
+      structure StringCvt = gs_0
+      BackEnd/engine-sig.sml
+   in
+      signature gs_9 = REGEXP_ENGINE
+   end
+   local
+      open l4
+   in
+      structure gs_10 = Array
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Vector
+   end
+   local
+      open l4
+   in
+      structure gs_12 = Int
+   end
+   local
+      structure Array = gs_10
+      structure Char = gs_5
+      structure Int = gs_12
+      structure List = gs_1
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      signature REGEXP_ENGINE = gs_9
+      structure RegExpSyntax = gs_8
+      structure StringCvt = gs_0
+      structure Vector = gs_11
+      BackEnd/thompson-engine.sml
+   in
+      structure gs_13 = ThompsonEngine
+   end
+   local
+      open l16
+   in
+      functor gs_14 = ListMapFn
+   end
+   local
+      open l4
+   in
+      structure gs_15 = Array2
+   end
+   local
+      open l4
+   in
+      structure gs_16 = TextIO
+   end
+   local
+      open l4
+   in
+      structure gs_17 = ListPair
+   end
+   local
+      structure Array = gs_10
+      structure Array2 = gs_15
+      structure Char = gs_5
+      structure Int = gs_12
+      structure List = gs_1
+      functor ListMapFn = gs_14
+      structure ListPair = gs_17
+      functor ListSetFn = gs_4
+      signature ORD_SET = gs_6
+      structure RegExpSyntax = gs_8
+      structure TextIO = gs_16
+      BackEnd/fsm.sml
+   in
+      signature gs_18 = DFA
+      structure gs_19 = Dfa
+      signature gs_20 = NFA
+      structure gs_21 = Nfa
+   end
+   local
+      signature DFA = gs_18
+      structure Dfa = gs_19
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      signature NFA = gs_20
+      structure Nfa = gs_21
+      signature REGEXP_ENGINE = gs_9
+      structure RegExpSyntax = gs_8
+      structure Vector = gs_11
+      BackEnd/dfa-engine.sml
+   in
+      structure gs_22 = DfaEngine
+   end
+   local
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      structure StringCvt = gs_0
+      Glue/regexp-sig.sml
+   in
+      signature gs_23 = REGEXP
+   end
+   local
+      structure RegExpSyntax = gs_8
+      structure StringCvt = gs_0
+      FrontEnd/parser-sig.sml
+   in
+      signature gs_24 = REGEXP_PARSER
+   end
+   local
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      signature REGEXP = gs_23
+      signature REGEXP_ENGINE = gs_9
+      signature REGEXP_PARSER = gs_24
+      structure RegExpSyntax = gs_8
+      structure StringCvt = gs_0
+      Glue/regexp-fn.sml
+   in
+      functor gs_25 = RegExpFn
+   end
+   local
+      open l4
+   in
+      structure gs_26 = Word8
+   end
+   local
+      structure Char = gs_5
+      structure Int = gs_12
+      structure List = gs_1
+      signature REGEXP_PARSER = gs_24
+      structure RegExpSyntax = gs_8
+      structure StringCvt = gs_0
+      structure Word8 = gs_26
+      FrontEnd/awk-syntax.sml
+   in
+      structure gs_27 = AwkSyntax
+   end
+   local
+      open l4
+   in
+      structure gs_28 = Option
+   end
+   local
+      structure List = gs_1
+      signature MATCH_TREE = gs_2
+      structure MatchTree = gs_3
+      structure Option = gs_28
+      signature REGEXP_ENGINE = gs_9
+      structure RegExpSyntax = gs_8
+      BackEnd/bt-engine.sml
+   in
+      structure gs_29 = BackTrackEngine
+   end
+in
+   structure AwkSyntax = gs_27
+   structure BackTrackEngine = gs_29
+   structure DfaEngine = gs_22
+   signature MATCH_TREE = gs_2
+   structure MatchTree = gs_3
+   signature REGEXP = gs_23
+   signature REGEXP_ENGINE = gs_9
+   signature REGEXP_PARSER = gs_24
+   signature REGEXP_SYNTAX = gs_7
+   functor RegExpFn = gs_25
+   structure RegExpSyntax = gs_8
+   structure ThompsonEngine = gs_13
+end
+end
+
+end
diff --git a/SExp/sexp-lib.mlb b/SExp/sexp-lib.mlb
index d7287e5..47e2c8c 100644
--- a/SExp/sexp-lib.mlb
+++ b/SExp/sexp-lib.mlb
@@ -1,51 +1,172 @@
-(* sexp-lib.mlb
- *
- * COPYRIGHT (c) 2011 The Fellowship of SML/NJ (http://www.smlnj.org)
- * All rights reserved.
- *
- * Author: Damon Wang (with modifications by John Reppy)
- *
- * An MLB file for the JSON library, so that it can be used by MLton programs.
- *
- * TODO:
- *	This is not complete, since MLton does not have the ml-lpt-lib yet.
- *)
-
-local
-
-  $(SML_LIB)/basis/basis.mlb
-  $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
-(* I don't know what the path to this library will be
-  ??/ml-lpt-lib/ml-lpt-lib.mlb
-*)
-
-  ann
-    "nonexhaustiveMatch warn" "redundantMatch warn"
-    "sequenceNonUnit ignore"
-    "warnUnused false" "forceUsed"
-  in
-
-    sexp-tokens.sml
-    sexp.lex.sml
-    sexp.sml
-(*    sexp-stream-parser.sml *)
-    sexp-parser.sml
-(*    sexp-stream-printer.sml *)
-    sexp-printer.sml
-
-  end
 
+ann
+  "nonexhaustiveBind ignore" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
 in
 
-(* DOM-style API (tree based) *)
-  structure SExp
-  structure SExpParser
-  structure SExpPrinter
-
-(* SAX-style API (event based) *)
-(*
-  structure SExpStreamParser
-  structure SExpStreamPrinter
-*)
+local
+  basis l8 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l4 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l38 =
+    bas
+      (* $/ml-lpt-lib.cm ====> *) $(SML_LIB)/mllpt-lib/mllpt-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = Format
+   end
+   local
+      open l8
+   in
+      structure gs_1 = TextIO
+   end
+   local
+      open l8
+   in
+      structure gs_2 = String
+   end
+   local
+      open l8
+   in
+      structure gs_3 = List
+   end
+   local
+      open l4
+   in
+      structure gs_4 = Atom
+   end
+   local
+      open l8
+   in
+      structure gs_5 = IntInf
+   end
+   local
+      open l8
+   in
+      structure gs_6 = ListPair
+   end
+   local
+      open l8
+   in
+      structure gs_7 = Real
+   end
+   local
+      structure Atom = gs_4
+      structure IntInf = gs_5
+      structure ListPair = gs_6
+      structure Real = gs_7
+      sexp.sml
+   in
+      structure gs_8 = SExp
+   end
+   local
+      structure Atom = gs_4
+      structure Format = gs_0
+      structure List = gs_3
+      structure SExp = gs_8
+      structure String = gs_2
+      structure TextIO = gs_1
+      sexp-printer.sml
+   in
+      structure gs_9 = SExpPrinter
+   end
+   local
+      open l38
+   in
+      structure gs_10 = AntlrStreamPos
+   end
+   local
+      open l38
+   in
+      structure gs_11 = UTF8
+   end
+   local
+      structure IntInf = gs_5
+      structure List = gs_3
+      structure Real = gs_7
+      structure String = gs_2
+      structure UTF8 = gs_11
+      sexp-tokens.sml
+   in
+      structure gs_12 = SExpTokens
+   end
+   local
+      open l8
+   in
+      structure gs_13 = StringCvt
+   end
+   local
+      open l8
+   in
+      structure gs_14 = LargeReal
+   end
+   local
+      open l8
+   in
+      structure gs_15 = Substring
+   end
+   local
+      open l8
+   in
+      structure gs_16 = Vector
+   end
+   local
+      open l38
+   in
+      structure gs_17 = ULexBuffer
+   end
+   local
+      open l8
+   in
+      structure gs_18 = Word
+   end
+   local
+      structure AntlrStreamPos = gs_10
+      structure IntInf = gs_5
+      structure LargeReal = gs_14
+      structure List = gs_3
+      structure SExpTokens = gs_12
+      structure String = gs_2
+      structure StringCvt = gs_13
+      structure Substring = gs_15
+      structure TextIO = gs_1
+      structure ULexBuffer = gs_17
+      structure UTF8 = gs_11
+      structure Vector = gs_16
+      structure Word = gs_18
+      sexp.lex.sml
+   in
+      structure gs_19 = SExpLexer
+   end
+   local
+      structure AntlrStreamPos = gs_10
+      structure Atom = gs_4
+      structure List = gs_3
+      structure SExp = gs_8
+      structure SExpLexer = gs_19
+      structure SExpTokens = gs_12
+      structure TextIO = gs_1
+      sexp-parser.sml
+   in
+      structure gs_20 = SExpParser
+   end
+in
+   structure SExp = gs_8
+   structure SExpParser = gs_20
+   structure SExpPrinter = gs_9
+end
+end
 
 end
diff --git a/SExp/sexp.lex.sml b/SExp/sexp.lex.sml
index 9a5cb8e..7c0b9a6 100644
--- a/SExp/sexp.lex.sml
+++ b/SExp/sexp.lex.sml
@@ -2,6 +2,8 @@ structure SExpLexer  = struct
 
     datatype yystart_state = 
 S | INITIAL
+    local
+
     structure UserDeclarations = 
       struct
 
@@ -23,10 +25,8 @@ S | INITIAL
 	end
   fun finishString () = (T.STRING(String.concat(List.rev(!sbuf))) before sbuf := [])
 
-
       end
 
-    local
     datatype yymatch 
       = yyNO_MATCH
       | yyMATCH of ULexBuffer.stream * action * yymatch
@@ -104,7 +104,7 @@ Vector.fromList []
 		(fn (~1, _, oldMatches) => yystuck oldMatches
 		  | (curState, strm, oldMatches) => let
 		      val (transitions, finals') = Vector.sub (yytable, curState)
-		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
+		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
 		      fun tryfinal() = 
 		            yystuck (yyactsToMatches (strm, finals, oldMatches))
 		      fun find (c, []) = NONE
diff --git a/Unix/unix-lib.mlb b/Unix/unix-lib.mlb
new file mode 100644
index 0000000..1481806
--- /dev/null
+++ b/Unix/unix-lib.mlb
@@ -0,0 +1,46 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = Substring
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Posix
+   end
+   local
+      unix-env-sig.sml
+   in
+      signature gs_2 = UNIX_ENV
+   end
+   local
+      structure Posix = gs_1
+      structure Substring = gs_0
+      signature UNIX_ENV = gs_2
+      unix-env.sml
+   in
+      structure gs_3 = UnixEnv
+   end
+in
+   signature UNIX_ENV = gs_2
+   structure UnixEnv = gs_3
+end
+end
+
+end
diff --git a/Util/base64.sml b/Util/base64.sml
index 2432737..8e989c8 100644
--- a/Util/base64.sml
+++ b/Util/base64.sml
@@ -11,9 +11,11 @@
 structure Base64 : BASE64 =
   struct
 
+    structure CA = CharArray
     structure W8 = Word8
     structure W8V = Word8Vector
     structure W8A = Word8Array
+    structure UCA = Unsafe.CharArray
     structure UCV = Unsafe.CharVector
     structure UW8V = Unsafe.Word8Vector
 
@@ -59,16 +61,16 @@ structure Base64 : BASE64 =
     local
       fun encode64 (vec, start, len) = let
 	    val outLen = 4 * Int.quot(len + 2, 3)
-	    val outBuf = Unsafe.CharVector.create outLen
+	    val outBuf = UCA.create outLen
 	    val nTriples = Int.quot(len, 3)
 	    val extra = Int.rem(len, 3)
 	    fun insBuf (i, (c1, c2, c3, c4)) = let
 		  val idx = 4*i
 		  in
-		    UCV.update(outBuf, idx,   c1);
-		    UCV.update(outBuf, idx+1, c2);
-		    UCV.update(outBuf, idx+2, c3);
-		    UCV.update(outBuf, idx+3, c4)
+		    UCA.update(outBuf, idx,   c1);
+		    UCA.update(outBuf, idx+1, c2);
+		    UCA.update(outBuf, idx+2, c3);
+		    UCA.update(outBuf, idx+3, c4)
 		  end
 	    fun loop (i, idx) = if (i < nTriples)
 		  then (
@@ -81,7 +83,7 @@ structure Base64 : BASE64 =
 		    (* end case *))
 	    in
 	      loop (0, start);
-	      outBuf
+	      CA.vector outBuf
 	    end
     in
 
diff --git a/Util/engine.mlton.sml b/Util/engine.mlton.sml
new file mode 100644
index 0000000..deb0c42
--- /dev/null
+++ b/Util/engine.mlton.sml
@@ -0,0 +1,99 @@
+(* Copyright (C) 1999-2004 Henry Cejtin, Matthew Fluet, Suresh
+ *    Jagannathan, and Stephen Weeks.
+ *
+ * MLton is released under the GNU General Public License (GPL).
+ * Please see the file MLton-LICENSE for license information.
+ *)
+
+signature ENGINE =
+   sig
+      type 'a t
+
+      datatype 'a res =
+	 Done of 'a
+       | Raise of exn
+       | TimeOut of 'a t
+
+      val new: (unit -> 'a) -> 'a t
+      val repeat: {thunk: unit -> 'a,
+		   limit: Time.time,
+		   tries: int} -> 'a option
+      val run: 'a t * Time.time -> 'a res
+      val timeLimit: Time.time * (unit -> 'a) -> 'a option
+   end
+
+structure Engine: ENGINE =
+struct
+
+open MLton
+
+datatype 'a t = T of {return: 'a res Thread.t option ref,
+		      thread: Thread.Runnable.t}
+and 'a res =
+   Done of 'a
+ | Raise of exn
+ | TimeOut of 'a t
+
+val which = Itimer.Real
+val signal = Itimer.signal which
+
+fun done (return): unit =
+   (return := NONE
+    ; Itimer.set (which, {value = Time.zeroTime,
+			  interval = Time.zeroTime})
+    ; Signal.setHandler (signal, Signal.Handler.default))
+
+fun new (f: unit -> 'a): 'a t =
+   let
+      val return = ref NONE
+      val thread =
+	 Thread.new
+	 (fn () =>
+	  let
+	     val res = Done (f ()) handle e => Raise e
+	     val ret = valOf (!return)
+	     val _ = done return
+	  in
+	     Thread.switch (fn _ => Thread.prepare (ret, res))
+	  end)
+      val thread = Thread.prepare (thread, ())
+   in
+      T {return = return, thread = thread}
+   end
+
+fun run (T {return, thread}, time: Time.time): 'a res =
+   Thread.switch
+   (fn cur: 'a res Thread.t =>
+    let
+       val _ = return := SOME cur
+       fun handler (me: Thread.Runnable.t): Thread.Runnable.t =
+	  Thread.prepare
+	  (Thread.prepend (cur, fn () => (done return
+					  ; TimeOut (T {return = return,
+							thread = me}))),
+	   ())
+       val _ = Signal.setHandler (signal, Signal.Handler.handler handler)
+       val _ = Itimer.set (which, {value = time,
+				   interval = Time.zeroTime})
+    in
+       thread
+    end)
+
+fun timeLimit (t: Time.time, f: unit -> 'a): 'a option =
+   case run (new f, t) of
+      Done a => SOME a
+    | Raise e => raise e
+    | TimeOut _ => NONE
+
+fun repeat {thunk, limit, tries} =
+   let
+      fun loop (n: int) =
+	 if n <= 0
+	    then NONE
+	 else (case timeLimit (limit, thunk) of
+		  NONE => loop (n - 1)
+		| SOME a => SOME a)
+   in loop tries
+   end
+
+end
diff --git a/Util/graph-scc-fn.sml b/Util/graph-scc-fn.sml
index 0dc3b32..4ae2d01 100644
--- a/Util/graph-scc-fn.sml
+++ b/Util/graph-scc-fn.sml
@@ -8,7 +8,7 @@
  * author: Matthias Blume
  *) 
 
-functor GraphSCCFn (Nd: ORD_KEY) :> GRAPH_SCC where Nd = Nd =
+functor GraphSCCFn (Nd: ORD_KEY) :> GRAPH_SCC where type Nd.ord_key = Nd.ord_key =
   struct
     structure Nd = Nd
 
diff --git a/Util/redblack-map-fn.sml b/Util/redblack-map-fn.sml
index 526bdc1..c26cb8f 100644
--- a/Util/redblack-map-fn.sml
+++ b/Util/redblack-map-fn.sml
@@ -23,7 +23,7 @@
  * will be black and its child will be a red leaf.
  *)
 
-functor RedBlackMapFn (K : ORD_KEY) :> ORD_MAP where Key = K =
+functor RedBlackMapFn (K : ORD_KEY) :> ORD_MAP where type Key.ord_key = K.ord_key =
   struct
 
     structure Key = K
diff --git a/Util/redblack-set-fn.sml b/Util/redblack-set-fn.sml
index 3a16a82..ebfbb5a 100644
--- a/Util/redblack-set-fn.sml
+++ b/Util/redblack-set-fn.sml
@@ -23,7 +23,7 @@
  * will be black and its child will be a red leaf.
  *)
 
-functor RedBlackSetFn (K : ORD_KEY) :> ORD_SET where Key = K =
+functor RedBlackSetFn (K : ORD_KEY) :> ORD_SET where type Key.ord_key = K.ord_key =
   struct
 
     structure Key = K
diff --git a/Util/smlnj-lib.mlb b/Util/smlnj-lib.mlb
new file mode 100644
index 0000000..7194e93
--- /dev/null
+++ b/Util/smlnj-lib.mlb
@@ -0,0 +1,1173 @@
+
+ann
+  "nonexhaustiveBind ignore" "nonexhaustiveMatch warn"
+  "redundantBind ignore" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/unsafe.mlb $(SML_LIB)/basis/sml-nj.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = List
+   end
+   local
+      ord-key-sig.sml
+   in
+      signature gs_1 = ORD_KEY
+   end
+   local
+      signature ORD_KEY = gs_1
+      ord-set-sig.sml
+   in
+      signature gs_2 = ORD_SET
+   end
+   local
+      open l4
+   in
+      structure gs_3 = Int
+   end
+   local
+      lib-base-sig.sml
+   in
+      signature gs_4 = LIB_BASE
+   end
+   local
+      structure Int = gs_3
+      signature LIB_BASE = gs_4
+      lib-base.sml
+   in
+      structure gs_5 = LibBase
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      signature ORD_SET = gs_2
+      list-set-fn.sml
+   in
+      functor gs_6 = ListSetFn
+   end
+   local
+      signature ORD_KEY = gs_1
+      ord-map-sig.sml
+   in
+      signature gs_7 = ORD_MAP
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      signature ORD_MAP = gs_7
+      list-map-fn.sml
+   in
+      functor gs_8 = ListMapFn
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_SET = gs_2
+      int-binary-set.sml
+   in
+      structure gs_9 = IntBinarySet
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      signature ORD_MAP = gs_7
+      int-binary-map.sml
+   in
+      structure gs_10 = IntBinaryMap
+   end
+   local
+      prime-sizes.sml
+   in
+      structure gs_11 = PrimeSizes
+   end
+   local
+      open l4
+   in
+      structure gs_12 = Array
+   end
+   local
+      open l4
+   in
+      structure gs_13 = ArraySlice
+   end
+   local
+      open l4
+   in
+      structure gs_14 = General
+   end
+   local
+      dynamic-array-sig.sml
+   in
+      signature gs_15 = DYNAMIC_ARRAY
+   end
+   local
+      structure Array = gs_12
+      structure ArraySlice = gs_13
+      signature DYNAMIC_ARRAY = gs_15
+      structure General = gs_14
+      structure Int = gs_3
+      dynamic-array.sml
+   in
+      structure gs_16 = DynamicArray
+   end
+   local
+      io-util-sig.sml
+   in
+      signature gs_17 = IO_UTIL
+   end
+   local
+      splaytree-sig.sml
+   in
+      signature gs_18 = SPLAY_TREE
+   end
+   local
+      signature SPLAY_TREE = gs_18
+      splaytree.sml
+   in
+      structure gs_19 = SplayTree
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      signature ORD_SET = gs_2
+      structure SplayTree = gs_19
+      splay-set-fn.sml
+   in
+      functor gs_20 = SplaySetFn
+   end
+   local
+      structure LibBase = gs_5
+      signature ORD_KEY = gs_1
+      signature ORD_MAP = gs_7
+      structure SplayTree = gs_19
+      splay-map-fn.sml
+   in
+      functor gs_21 = SplayMapFn
+   end
+   local
+      open l4
+   in
+      structure gs_22 = TextIO
+   end
+   local
+      structure Int = gs_3
+      structure List = gs_0
+      structure TextIO = gs_22
+      ansi-term.sml
+   in
+      structure gs_23 = ANSITerm
+   end
+   local
+      signature IO_UTIL = gs_17
+      structure TextIO = gs_22
+      io-util.sml
+   in
+      structure gs_24 = IOUtil
+   end
+   local
+      plist-sig.sml
+   in
+      signature gs_25 = PROP_LIST
+   end
+   local
+      open l4
+   in
+      structure gs_26 = Substring
+   end
+   local
+      open l4
+   in
+      structure gs_27 = StringCvt
+   end
+   local
+      open l4
+   in
+      structure gs_28 = String
+   end
+   local
+      open l4
+   in
+      structure gs_29 = Option
+   end
+   local
+      open l4
+   in
+      structure gs_30 = Char
+   end
+   local
+      getopt-sig.sml
+   in
+      signature gs_31 = GET_OPT
+   end
+   local
+      structure Char = gs_30
+      signature GET_OPT = gs_31
+      structure Int = gs_3
+      structure List = gs_0
+      structure Option = gs_29
+      structure String = gs_28
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      getopt.sml
+   in
+      structure gs_32 = GetOpt
+   end
+   local
+      interval-domain-sig.sml
+   in
+      signature gs_33 = INTERVAL_DOMAIN
+   end
+   local
+      signature INTERVAL_DOMAIN = gs_33
+      interval-set-sig.sml
+   in
+      signature gs_34 = INTERVAL_SET
+   end
+   local
+      structure StringCvt = gs_27
+      parser-comb-sig.sml
+   in
+      signature gs_35 = PARSER_COMB
+   end
+   local
+      open l4
+   in
+      structure gs_36 = Word8
+   end
+   local
+      open l4
+   in
+      structure gs_37 = CharVector
+   end
+   local
+      open l4
+   in
+      structure gs_38 = LargeWord
+   end
+   local
+      open l4
+   in
+      structure gs_39 = LargeInt
+   end
+   local
+      open l4
+   in
+      structure gs_40 = Word
+   end
+   local
+      open l4
+   in
+      structure gs_41 = Real
+   end
+   local
+      open l4
+   in
+      structure gs_42 = LargeReal
+   end
+   local
+      atom-sig.sml
+   in
+      signature gs_43 = ATOM
+   end
+   local
+      open l4
+   in
+      structure gs_44 = Unsafe
+   end
+   local
+      structure Char = gs_30
+      structure Substring = gs_26
+      structure Unsafe = gs_44
+      structure Word = gs_40
+      hash-string.sml
+   in
+      structure gs_45 = HashString
+   end
+   local
+      signature ATOM = gs_43
+      structure Array = gs_12
+      structure HashString = gs_45
+      structure String = gs_28
+      structure Substring = gs_26
+      structure Word = gs_40
+      atom.sml
+   in
+      structure gs_46 = Atom
+   end
+   local
+      structure Atom = gs_46
+      structure Int = gs_3
+      structure LargeInt = gs_39
+      structure LargeReal = gs_42
+      structure LargeWord = gs_38
+      structure Real = gs_41
+      structure Word = gs_40
+      structure Word8 = gs_36
+      format-sig.sml
+   in
+      signature gs_47 = FORMAT
+   end
+   local
+      structure Int = gs_3
+      structure String = gs_28
+      structure StringCvt = gs_27
+      real-format.sml
+   in
+      structure gs_48 = RealFormat
+   end
+   local
+      structure Atom = gs_46
+      structure Char = gs_30
+      structure Int = gs_3
+      structure LargeInt = gs_39
+      structure LargeReal = gs_42
+      structure LargeWord = gs_38
+      structure Real = gs_41
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      structure Word = gs_40
+      structure Word8 = gs_36
+      fmt-fields.sml
+   in
+      structure gs_49 = FmtFields
+   end
+   local
+      structure Atom = gs_46
+      structure Char = gs_30
+      structure CharVector = gs_37
+      signature FORMAT = gs_47
+      structure FmtFields = gs_49
+      structure Int = gs_3
+      structure LargeInt = gs_39
+      structure LargeWord = gs_38
+      structure Real = gs_41
+      structure RealFormat = gs_48
+      structure String = gs_28
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      structure Word = gs_40
+      structure Word8 = gs_36
+      format.sml
+   in
+      structure gs_50 = Format
+   end
+   local
+      priority-sig.sml
+   in
+      signature gs_51 = PRIORITY
+   end
+   local
+      hash-key-sig.sml
+   in
+      signature gs_52 = HASH_KEY
+   end
+   local
+      signature HASH_KEY = gs_52
+      mono-hash-table-sig.sml
+   in
+      signature gs_53 = MONO_HASH_TABLE
+   end
+   local
+      structure Array = gs_12
+      structure Word = gs_40
+      hash-table-rep.sml
+   in
+      structure gs_54 = HashTableRep
+   end
+   local
+      structure Array = gs_12
+      structure HashTableRep = gs_54
+      signature MONO_HASH_TABLE = gs_53
+      structure Word = gs_40
+      int-hash-table.sml
+   in
+      structure gs_55 = IntHashTable
+   end
+   local
+      open l4
+   in
+      signature gs_56 = MONO_ARRAY
+   end
+   local
+      signature MONO_ARRAY = gs_56
+      bit-array-sig.sml
+   in
+      signature gs_57 = BIT_ARRAY
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      signature ORD_SET = gs_2
+      redblack-set-fn.sml
+   in
+      functor gs_58 = RedBlackSetFn
+   end
+   local
+      structure Atom = gs_46
+      functor RedBlackSetFn = gs_58
+      atom-redblack-set.sml
+   in
+      structure gs_59 = AtomRedBlackSet
+   end
+   local
+      structure AtomRedBlackSet = gs_59
+      atom-set.sml
+   in
+      structure gs_60 = AtomSet
+   end
+   local
+      structure LibBase = gs_5
+      signature ORD_KEY = gs_1
+      signature ORD_MAP = gs_7
+      redblack-map-fn.sml
+   in
+      functor gs_61 = RedBlackMapFn
+   end
+   local
+      structure Atom = gs_46
+      functor RedBlackMapFn = gs_61
+      atom-redblack-map.sml
+   in
+      structure gs_62 = AtomRedBlackMap
+   end
+   local
+      structure AtomRedBlackMap = gs_62
+      atom-map.sml
+   in
+      structure gs_63 = AtomMap
+   end
+   local
+      open l4
+   in
+      structure gs_64 = Word8Array
+   end
+   local
+      open l4
+   in
+      structure gs_65 = Word8Vector
+   end
+   local
+      open l4
+   in
+      structure gs_66 = CharArray
+   end
+   local
+      open l4
+   in
+      structure gs_67 = Word8VectorSlice
+   end
+   local
+      open l4
+   in
+      structure gs_68 = Word8ArraySlice
+   end
+   local
+      structure Word8Vector = gs_65
+      structure Word8VectorSlice = gs_67
+      base64-sig.sml
+   in
+      signature gs_69 = BASE64
+   end
+   local
+      signature BASE64 = gs_69
+      structure Char = gs_30
+      structure CharArray = gs_66
+      structure CharVector = gs_37
+      structure Int = gs_3
+      structure String = gs_28
+      structure Substring = gs_26
+      structure Unsafe = gs_44
+      structure Word = gs_40
+      structure Word8 = gs_36
+      structure Word8Array = gs_64
+      structure Word8ArraySlice = gs_68
+      structure Word8Vector = gs_65
+      structure Word8VectorSlice = gs_67
+      base64.sml
+   in
+      structure gs_70 = Base64
+   end
+   local
+      structure List = gs_0
+      signature PROP_LIST = gs_25
+      plist.sml
+   in
+      structure gs_71 = PropList
+   end
+   local
+      open l4
+   in
+      structure gs_72 = Vector
+   end
+   local
+      char-map-sig.sml
+   in
+      signature gs_73 = CHAR_MAP
+   end
+   local
+      structure Array = gs_12
+      signature CHAR_MAP = gs_73
+      structure Char = gs_30
+      structure String = gs_28
+      structure Vector = gs_72
+      char-map.sml
+   in
+      structure gs_74 = CharMap
+   end
+   local
+      list-xprod-sig.sml
+   in
+      signature gs_75 = LIST_XPROD
+   end
+   local
+      signature ORD_KEY = gs_1
+      graph-scc-sig.sml
+   in
+      signature gs_76 = GRAPH_SCC
+   end
+   local
+      signature GRAPH_SCC = gs_76
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      functor RedBlackMapFn = gs_61
+      graph-scc-fn.sml
+   in
+      functor gs_77 = GraphSCCFn
+   end
+   local
+      structure Array = gs_12
+      signature HASH_KEY = gs_52
+      structure HashTableRep = gs_54
+      signature MONO_HASH_TABLE = gs_53
+      structure Word = gs_40
+      hash-table-fn.sml
+   in
+      functor gs_78 = HashTableFn
+   end
+   local
+      structure Atom = gs_46
+      functor HashTableFn = gs_78
+      atom-table.sml
+   in
+      structure gs_79 = AtomTable
+   end
+   local
+      structure StringCvt = gs_27
+      list-format-sig.sml
+   in
+      signature gs_80 = LIST_FORMAT
+   end
+   local
+      signature LIST_FORMAT = gs_80
+      structure String = gs_28
+      structure StringCvt = gs_27
+      list-format.sml
+   in
+      structure gs_81 = ListFormat
+   end
+   local
+      open l4
+   in
+      signature gs_82 = MONO_VECTOR
+   end
+   local
+      signature MONO_VECTOR = gs_82
+      bit-vector-sig.sml
+   in
+      signature gs_83 = BIT_VECTOR
+   end
+   local
+      signature PARSER_COMB = gs_35
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      parser-comb.sml
+   in
+      structure gs_84 = ParserComb
+   end
+   local
+      signature HASH_KEY = gs_52
+      mono-hash2-table-sig.sml
+   in
+      signature gs_85 = MONO_HASH2_TABLE
+   end
+   local
+      signature INTERVAL_DOMAIN = gs_33
+      signature INTERVAL_SET = gs_34
+      structure List = gs_0
+      interval-set-fn.sml
+   in
+      functor gs_86 = IntervalSetFn
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_SET = gs_2
+      structure Word = gs_40
+      word-redblack-set.sml
+   in
+      structure gs_87 = WordRedBlackSet
+   end
+   local
+      structure LibBase = gs_5
+      signature ORD_MAP = gs_7
+      structure Word = gs_40
+      word-redblack-map.sml
+   in
+      structure gs_88 = WordRedBlackMap
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_SET = gs_2
+      int-list-set.sml
+   in
+      structure gs_89 = IntListSet
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_MAP = gs_7
+      int-list-map.sml
+   in
+      structure gs_90 = IntListMap
+   end
+   local
+      open l4
+   in
+      structure gs_91 = OS
+   end
+   local
+      path-util-sig.sml
+   in
+      signature gs_92 = PATH_UTIL
+   end
+   local
+      structure OS = gs_91
+      signature PATH_UTIL = gs_92
+      path-util.sml
+   in
+      structure gs_93 = PathUtil
+   end
+   local
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_KEY = gs_1
+      signature ORD_SET = gs_2
+      binary-set-fn.sml
+   in
+      functor gs_94 = BinarySetFn
+   end
+   local
+      structure LibBase = gs_5
+      signature ORD_KEY = gs_1
+      signature ORD_MAP = gs_7
+      binary-map-fn.sml
+   in
+      functor gs_95 = BinaryMapFn
+   end
+   local
+      open l4
+   in
+      structure gs_96 = Math
+   end
+   local
+      open l4
+   in
+      structure gs_97 = PackWord32Big
+   end
+   local
+      open l4
+   in
+      structure gs_98 = Word31
+   end
+   local
+      open l4
+   in
+      structure gs_99 = Byte
+   end
+   local
+      random-sig.sml
+   in
+      signature gs_100 = RANDOM
+   end
+   local
+      structure Array = gs_12
+      structure Byte = gs_99
+      structure LargeWord = gs_38
+      structure LibBase = gs_5
+      structure PackWord32Big = gs_97
+      signature RANDOM = gs_100
+      structure Word31 = gs_98
+      structure Word8Array = gs_64
+      structure Word8Vector = gs_65
+      random.sml
+   in
+      structure gs_101 = Random
+   end
+   local
+      structure Array = gs_12
+      structure ArraySlice = gs_13
+      structure Random = gs_101
+      structure Real = gs_41
+      structure Unsafe = gs_44
+      structure Word = gs_40
+      real-order-stats.sml
+   in
+      structure gs_102 = RealOrderStats
+   end
+   local
+      structure Array = gs_12
+      structure ArraySlice = gs_13
+      structure Math = gs_96
+      structure RealOrderStats = gs_102
+      structure Unsafe = gs_44
+      univariate-stats.sml
+   in
+      structure gs_103 = UnivariateStats
+   end
+   local
+      signature BIT_ARRAY = gs_57
+      structure Byte = gs_99
+      structure Int = gs_3
+      structure LibBase = gs_5
+      structure List = gs_0
+      structure Unsafe = gs_44
+      structure Word = gs_40
+      structure Word8 = gs_36
+      structure Word8Array = gs_64
+      structure Word8Vector = gs_65
+      bit-array.sml
+   in
+      structure gs_104 = BitArray
+   end
+   local
+      structure Array = gs_12
+      signature MONO_ARRAY = gs_56
+      structure Vector = gs_72
+      mono-array-fn.sml
+   in
+      functor gs_105 = MonoArrayFn
+   end
+   local
+      signature MONO_ARRAY = gs_56
+      bsearch-fn.sml
+   in
+      functor gs_106 = BSearchFn
+   end
+   local
+      mono-dynamic-array-sig.sml
+   in
+      signature gs_107 = MONO_DYNAMIC_ARRAY
+   end
+   local
+      open l4
+   in
+      structure gs_108 = Bool
+   end
+   local
+      structure StringCvt = gs_27
+      format-comb-sig.sml
+   in
+      signature gs_109 = FORMAT_COMB
+   end
+   local
+      structure Bool = gs_108
+      structure Char = gs_30
+      signature FORMAT_COMB = gs_109
+      structure Int = gs_3
+      structure List = gs_0
+      structure Real = gs_41
+      structure String = gs_28
+      structure StringCvt = gs_27
+      format-comb.sml
+   in
+      structure gs_110 = FormatComb
+   end
+   local
+      queue-sig.sml
+   in
+      signature gs_111 = QUEUE
+   end
+   local
+      fifo-sig.sml
+   in
+      signature gs_112 = FIFO
+   end
+   local
+      signature FIFO = gs_112
+      structure List = gs_0
+      fifo.sml
+   in
+      structure gs_113 = Fifo
+   end
+   local
+      structure Fifo = gs_113
+      signature QUEUE = gs_111
+      queue.sml
+   in
+      structure gs_114 = Queue
+   end
+   local
+      structure Array = gs_12
+      signature HASH_KEY = gs_52
+      structure HashTableRep = gs_54
+      signature MONO_HASH2_TABLE = gs_85
+      structure Word = gs_40
+      hash2-table-fn.sml
+   in
+      functor gs_115 = Hash2TableFn
+   end
+   local
+      structure Array = gs_12
+      structure HashTableRep = gs_54
+      signature MONO_HASH_TABLE = gs_53
+      structure Word = gs_40
+      word-hash-table.sml
+   in
+      structure gs_116 = WordHashTable
+   end
+   local
+      structure Atom = gs_46
+      structure AtomTable = gs_79
+      structure List = gs_0
+      keyword-fn.sml
+   in
+      functor gs_117 = KeywordFn
+   end
+   local
+      mono-priorityq-sig.sml
+   in
+      signature gs_118 = MONO_PRIORITYQ
+   end
+   local
+      structure List = gs_0
+      signature MONO_PRIORITYQ = gs_118
+      signature PRIORITY = gs_51
+      left-priorityq-fn.sml
+   in
+      functor gs_119 = LeftPriorityQFn
+   end
+   local
+      hash-table-sig.sml
+   in
+      signature gs_120 = HASH_TABLE
+   end
+   local
+      structure Array = gs_12
+      signature HASH_TABLE = gs_120
+      structure HashTableRep = gs_54
+      structure Word = gs_40
+      hash-table.sml
+   in
+      structure gs_121 = HashTable
+   end
+   local
+      structure Array = gs_12
+      signature HASH_KEY = gs_52
+      structure List = gs_0
+      structure Word = gs_40
+      hash-set-fn.sml
+   in
+      signature gs_122 = HASH_SET
+      functor gs_123 = HashSetFn
+   end
+   local
+      structure General = gs_14
+      structure Int = gs_3
+      signature MONO_ARRAY = gs_56
+      signature MONO_DYNAMIC_ARRAY = gs_107
+      dynamic-array-fn.sml
+   in
+      functor gs_124 = DynamicArrayFn
+   end
+   local
+      signature MONO_ARRAY = gs_56
+      mono-array-sort-sig.sml
+   in
+      signature gs_125 = MONO_ARRAY_SORT
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      structure List = gs_0
+      signature ORD_SET = gs_2
+      int-redblack-set.sml
+   in
+      structure gs_126 = IntRedBlackSet
+   end
+   local
+      structure Int = gs_3
+      structure LibBase = gs_5
+      signature ORD_MAP = gs_7
+      int-redblack-map.sml
+   in
+      structure gs_127 = IntRedBlackMap
+   end
+   local
+      array-sort-sig.sml
+   in
+      signature gs_128 = ARRAY_SORT
+   end
+   local
+      signature ARRAY_SORT = gs_128
+      structure Array = gs_12
+      structure Int = gs_3
+      structure Unsafe = gs_44
+      array-qsort.sml
+   in
+      structure gs_129 = ArrayQSort
+   end
+   local
+      uref-sig.sml
+   in
+      signature gs_130 = UREF
+   end
+   local
+      signature UREF = gs_130
+      simple-uref.sml
+   in
+      structure gs_131 = SimpleURef
+   end
+   local
+      listsort-sig.sml
+   in
+      signature gs_132 = LIST_SORT
+   end
+   local
+      signature LIST_SORT = gs_132
+      list-mergesort.sml
+   in
+      structure gs_133 = ListMergeSort
+   end
+   local
+      structure Int = gs_3
+      signature MONO_ARRAY = gs_56
+      signature MONO_ARRAY_SORT = gs_125
+      array-qsort-fn.sml
+   in
+      functor gs_134 = ArrayQSortFn
+   end
+   local
+      structure Atom = gs_46
+      functor BinarySetFn = gs_94
+      atom-binary-set.sml
+   in
+      structure gs_135 = AtomBinarySet
+   end
+   local
+      structure Atom = gs_46
+      functor BinaryMapFn = gs_95
+      atom-binary-map.sml
+   in
+      structure gs_136 = AtomBinaryMap
+   end
+   local
+      structure StringCvt = gs_27
+      utf8-sig.sml
+   in
+      signature gs_137 = UTF8
+   end
+   local
+      structure Char = gs_30
+      structure String = gs_28
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      signature UTF8 = gs_137
+      structure Word = gs_40
+      utf8.sml
+   in
+      structure gs_138 = UTF8
+   end
+   local
+      signature UREF = gs_130
+      uref.sml
+   in
+      structure gs_139 = URef
+   end
+   local
+      structure Atom = gs_46
+      structure Int = gs_3
+      structure LargeInt = gs_39
+      structure LargeReal = gs_42
+      structure LargeWord = gs_38
+      structure Real = gs_41
+      structure StringCvt = gs_27
+      structure Word = gs_40
+      structure Word8 = gs_36
+      scan-sig.sml
+   in
+      signature gs_140 = SCAN
+   end
+   local
+      structure Bool = gs_108
+      structure Char = gs_30
+      structure FmtFields = gs_49
+      structure Int = gs_3
+      structure LargeInt = gs_39
+      structure LargeReal = gs_42
+      signature SCAN = gs_140
+      structure StringCvt = gs_27
+      structure Substring = gs_26
+      structure Word8Array = gs_64
+      scan.sml
+   in
+      structure gs_141 = Scan
+   end
+   local
+      open l4
+   in
+      structure gs_142 = Int32
+   end
+   local
+      structure Word31 = gs_98
+      rand-sig.sml
+   in
+      signature gs_143 = RAND
+   end
+   local
+      structure Int32 = gs_142
+      structure LibBase = gs_5
+      signature RAND = gs_143
+      structure Real = gs_41
+      structure Word31 = gs_98
+      rand.sml
+   in
+      structure gs_144 = Rand
+   end
+   local
+      signature LIST_XPROD = gs_75
+      list-xprod.sml
+   in
+      structure gs_145 = ListXProd
+   end
+in
+   structure ANSITerm = gs_23
+   signature ARRAY_SORT = gs_128
+   signature ATOM = gs_43
+   structure ArrayQSort = gs_129
+   functor ArrayQSortFn = gs_134
+   structure Atom = gs_46
+   structure AtomBinaryMap = gs_136
+   structure AtomBinarySet = gs_135
+   structure AtomMap = gs_63
+   structure AtomRedBlackMap = gs_62
+   structure AtomRedBlackSet = gs_59
+   structure AtomSet = gs_60
+   structure AtomTable = gs_79
+   signature BASE64 = gs_69
+   signature BIT_ARRAY = gs_57
+   signature BIT_VECTOR = gs_83
+   functor BSearchFn = gs_106
+   structure Base64 = gs_70
+   functor BinaryMapFn = gs_95
+   functor BinarySetFn = gs_94
+   structure BitArray = gs_104
+   signature CHAR_MAP = gs_73
+   structure CharMap = gs_74
+   signature DYNAMIC_ARRAY = gs_15
+   structure DynamicArray = gs_16
+   functor DynamicArrayFn = gs_124
+   signature FIFO = gs_112
+   signature FORMAT = gs_47
+   signature FORMAT_COMB = gs_109
+   structure Fifo = gs_113
+   structure Format = gs_50
+   structure FormatComb = gs_110
+   signature GET_OPT = gs_31
+   signature GRAPH_SCC = gs_76
+   structure GetOpt = gs_32
+   functor GraphSCCFn = gs_77
+   signature HASH_KEY = gs_52
+   signature HASH_SET = gs_122
+   signature HASH_TABLE = gs_120
+   functor Hash2TableFn = gs_115
+   functor HashSetFn = gs_123
+   structure HashString = gs_45
+   structure HashTable = gs_121
+   functor HashTableFn = gs_78
+   signature INTERVAL_DOMAIN = gs_33
+   signature INTERVAL_SET = gs_34
+   structure IOUtil = gs_24
+   signature IO_UTIL = gs_17
+   structure IntBinaryMap = gs_10
+   structure IntBinarySet = gs_9
+   structure IntHashTable = gs_55
+   structure IntListMap = gs_90
+   structure IntListSet = gs_89
+   structure IntRedBlackMap = gs_127
+   structure IntRedBlackSet = gs_126
+   functor IntervalSetFn = gs_86
+   functor KeywordFn = gs_117
+   signature LIB_BASE = gs_4
+   signature LIST_FORMAT = gs_80
+   signature LIST_SORT = gs_132
+   signature LIST_XPROD = gs_75
+   functor LeftPriorityQFn = gs_119
+   structure LibBase = gs_5
+   structure ListFormat = gs_81
+   functor ListMapFn = gs_8
+   structure ListMergeSort = gs_133
+   functor ListSetFn = gs_6
+   structure ListXProd = gs_145
+   signature MONO_ARRAY_SORT = gs_125
+   signature MONO_DYNAMIC_ARRAY = gs_107
+   signature MONO_HASH2_TABLE = gs_85
+   signature MONO_HASH_TABLE = gs_53
+   signature MONO_PRIORITYQ = gs_118
+   functor MonoArrayFn = gs_105
+   signature ORD_KEY = gs_1
+   signature ORD_MAP = gs_7
+   signature ORD_SET = gs_2
+   signature PARSER_COMB = gs_35
+   signature PATH_UTIL = gs_92
+   signature PRIORITY = gs_51
+   signature PROP_LIST = gs_25
+   structure ParserComb = gs_84
+   structure PathUtil = gs_93
+   structure PrimeSizes = gs_11
+   structure PropList = gs_71
+   signature QUEUE = gs_111
+   structure Queue = gs_114
+   signature RAND = gs_143
+   signature RANDOM = gs_100
+   structure Rand = gs_144
+   structure Random = gs_101
+   structure RealOrderStats = gs_102
+   functor RedBlackMapFn = gs_61
+   functor RedBlackSetFn = gs_58
+   signature SCAN = gs_140
+   signature SPLAY_TREE = gs_18
+   structure Scan = gs_141
+   structure SimpleURef = gs_131
+   functor SplayMapFn = gs_21
+   functor SplaySetFn = gs_20
+   structure SplayTree = gs_19
+   signature UREF = gs_130
+   structure URef = gs_139
+   signature UTF8 = gs_137
+   structure UTF8 = gs_138
+   structure UnivariateStats = gs_103
+   structure WordHashTable = gs_116
+   structure WordRedBlackMap = gs_88
+   structure WordRedBlackSet = gs_87
+end
+end
+
+end
diff --git a/Util/time-limit.mlb b/Util/time-limit.mlb
new file mode 100644
index 0000000..c4ca078
--- /dev/null
+++ b/Util/time-limit.mlb
@@ -0,0 +1,16 @@
+ann
+  "nonexhaustiveMatch warn" "redundantMatch warn"
+  "sequenceNonUnit warn"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  $(SML_LIB)/basis/basis.mlb
+  $(SML_LIB)/basis/mlton.mlb
+  engine.mlton.sml
+  time-limit.mlton.sml
+in
+  structure TimeLimit = TimeLimit
+end
+
+end
diff --git a/Util/time-limit.mlton.sml b/Util/time-limit.mlton.sml
new file mode 100644
index 0000000..0f585b7
--- /dev/null
+++ b/Util/time-limit.mlton.sml
@@ -0,0 +1,24 @@
+(* time-limit.mlton.sml
+ *
+ * Copyright (C) 1999-2004 Henry Cejtin, Matthew Fluet, Suresh
+ *    Jagannathan, and Stephen Weeks.
+ *
+ * MLton is released under the GNU General Public License (GPL).
+ * Please see the file MLton-LICENSE for license information.
+ *
+ *)
+
+structure TimeLimit:
+sig
+   exception TimeOut
+   val timeLimit : Time.time -> ('a -> 'b) -> 'a -> 'b
+end =
+struct
+   exception TimeOut
+
+   fun timeLimit t f x =
+      case Engine.run (Engine.new (fn () => f x), t) of
+	 Engine.Done res => res
+       | Engine.Raise exn => raise exn
+       | Engine.TimeOut _ => raise TimeOut
+end
diff --git a/XML/xml-lexer.lex.sml b/XML/xml-lexer.lex.sml
index a162cf4..6652b22 100644
--- a/XML/xml-lexer.lex.sml
+++ b/XML/xml-lexer.lex.sml
@@ -2,6 +2,8 @@ structure XMLLexer  = struct
 
     datatype yystart_state = 
 COM | TAG | LIT1 | LIT2 | INITIAL | DOCTYPE
+    local
+
     structure UserDeclarations = 
       struct
 
@@ -24,10 +26,8 @@ COM | TAG | LIT1 | LIT2 | INITIAL | DOCTYPE
 (* trim m characters from the left and n characters from the right *)
   fun trim (m, ss, n) = Substring.string(Substring.triml m (Substring.trimr n ss))
 
-
       end
 
-    local
     datatype yymatch 
       = yyNO_MATCH
       | yyMATCH of ULexBuffer.stream * action * yymatch
@@ -105,7 +105,7 @@ Vector.fromList []
 		(fn (~1, _, oldMatches) => yystuck oldMatches
 		  | (curState, strm, oldMatches) => let
 		      val (transitions, finals') = Vector.sub (yytable, curState)
-		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
+		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
 		      fun tryfinal() = 
 		            yystuck (yyactsToMatches (strm, finals, oldMatches))
 		      fun find (c, []) = NONE
diff --git a/XML/xml-lib.mlb b/XML/xml-lib.mlb
new file mode 100644
index 0000000..5b59f54
--- /dev/null
+++ b/XML/xml-lib.mlb
@@ -0,0 +1,167 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb
+    end
+  basis l11 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l30 =
+    bas
+      (* $/ml-lpt-lib.cm ====> *) $(SML_LIB)/mllpt-lib/mllpt-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = CharVector
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Char
+   end
+   local
+      open l11
+   in
+      structure gs_2 = Atom
+   end
+   local
+      xml-schema-sig.sml
+   in
+      signature gs_3 = XML_SCHEMA
+   end
+   local
+      signature XML_SCHEMA = gs_3
+      xml-tree-sig.sml
+   in
+      signature gs_4 = XML_TREE
+   end
+   local
+      signature XML_SCHEMA = gs_3
+      signature XML_TREE = gs_4
+      xml-tree-fn.sml
+   in
+      functor gs_5 = XMLTreeFn
+   end
+   local
+      structure Atom = gs_2
+      structure Char = gs_1
+      structure CharVector = gs_0
+      functor XMLTreeFn = gs_5
+      generic-xml-tree.sml
+   in
+      structure gs_6 = GenericXMLTree
+   end
+   local
+      open l30
+   in
+      structure gs_7 = AntlrStreamPos
+   end
+   local
+      open l4
+   in
+      structure gs_8 = TextIO
+   end
+   local
+      open l4
+   in
+      structure gs_9 = String
+   end
+   local
+      open l4
+   in
+      structure gs_10 = List
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Substring
+   end
+   local
+      open l4
+   in
+      structure gs_12 = Vector
+   end
+   local
+      open l30
+   in
+      structure gs_13 = ULexBuffer
+   end
+   local
+      open l4
+   in
+      structure gs_14 = Option
+   end
+   local
+      open l4
+   in
+      structure gs_15 = Word
+   end
+   local
+      open l30
+   in
+      structure gs_16 = UTF8
+   end
+   local
+      open l4
+   in
+      structure gs_17 = Int
+   end
+   local
+      xml-tokens.sml
+   in
+      structure gs_18 = XMLTokens
+   end
+   local
+      structure AntlrStreamPos = gs_7
+      structure Int = gs_17
+      structure List = gs_10
+      structure Option = gs_14
+      structure String = gs_9
+      structure Substring = gs_11
+      structure TextIO = gs_8
+      structure ULexBuffer = gs_13
+      structure UTF8 = gs_16
+      structure Vector = gs_12
+      structure Word = gs_15
+      structure XMLTokens = gs_18
+      xml-lexer.lex.sml
+   in
+      structure gs_19 = XMLLexer
+   end
+   local
+      structure AntlrStreamPos = gs_7
+      structure List = gs_10
+      structure String = gs_9
+      structure TextIO = gs_8
+      structure XMLLexer = gs_19
+      structure XMLTokens = gs_18
+      signature XML_TREE = gs_4
+      xml-parser-fn.sml
+   in
+      functor gs_20 = XMLParserFn
+      signature gs_21 = XML_PARSER
+   end
+in
+   structure GenericXMLTree = gs_6
+   functor XMLParserFn = gs_20
+   functor XMLTreeFn = gs_5
+   signature XML_PARSER = gs_21
+   signature XML_SCHEMA = gs_3
+   signature XML_TREE = gs_4
+end
+end
+
+end
diff --git a/smlnj-lib.mlb b/smlnj-lib.mlb
new file mode 100644
index 0000000..6a916cf
--- /dev/null
+++ b/smlnj-lib.mlb
@@ -0,0 +1,17 @@
+local
+   Controls/controls-lib.mlb
+   HTML/html-lib.mlb
+   HTML4/html4-lib.mlb
+   HashCons/hash-cons-lib.mlb
+   INet/inet-lib.mlb
+   JSON/json-lib.mlb
+   PP/pp-lib.mlb
+   Reactive/reactive-lib.mlb
+   RegExp/regexp-lib.mlb
+   SExp/sexp-lib.mlb
+   Unix/unix-lib.mlb
+   Util/smlnj-lib.mlb
+   Util/time-limit.mlb
+   XML/xml-lib.mlb
+in
+end
